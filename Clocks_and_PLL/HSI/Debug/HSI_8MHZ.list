
HSI_8MHZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003498  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003668  08003668  00013668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f4  080036f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080036f4  080036f4  000136f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036fc  080036fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036fc  080036fc  000136fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08003774  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003774  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091ac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e7  00000000  00000000  0002924c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0002aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002b118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021286  00000000  00000000  0002b760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cde  00000000  00000000  0004c9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c87b5  00000000  00000000  000566c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ee79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef8  00000000  00000000  0011eecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003650 	.word	0x08003650

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003650 	.word	0x08003650

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
UART_HandleTypeDef huart2;



int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b0ac      	sub	sp, #176	; 0xb0
 80005c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	char msg[100];

	HAL_Init();
 80005ca:	f000 f9d1 	bl	8000970 <HAL_Init>

	UART2_Init();
 80005ce:	f000 f8b7 	bl	8000740 <UART2_Init>

	memset(&osc_init,0,sizeof(osc_init));
 80005d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005d6:	2234      	movs	r2, #52	; 0x34
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fbc2 	bl	8002d64 <memset>
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	67fb      	str	r3, [r7, #124]	; 0x7c
	osc_init.HSEState = RCC_HSE_BYPASS;
 80005e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	if(HAL_RCC_OscConfig(&osc_init)!= HAL_OK)
 80005ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 f8db 	bl	80017ac <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <main+0x3c>
	{
		Error_Handler();
 80005fc:	f000 f8c6 	bl	800078c <Error_Handler>
	}

	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |\
 8000600:	230f      	movs	r3, #15
 8000602:	66bb      	str	r3, [r7, #104]	; 0x68
			RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	66fb      	str	r3, [r7, #108]	; 0x6c
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	673b      	str	r3, [r7, #112]	; 0x70
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000610:	677b      	str	r3, [r7, #116]	; 0x74
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	67bb      	str	r3, [r7, #120]	; 0x78

	if(HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS)!=HAL_OK)
 8000618:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fd7a 	bl	8001118 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <main+0x6a>
	{
		Error_Handler();
 800062a:	f000 f8af 	bl	800078c <Error_Handler>
	}

	__HAL_RCC_HSI_DISABLE();
 800062e:	4b3d      	ldr	r3, [pc, #244]	; (8000724 <main+0x160>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000634:	f000 fe56 	bl	80012e4 <HAL_RCC_GetHCLKFreq>
 8000638:	4603      	mov	r3, r0
 800063a:	4a3b      	ldr	r2, [pc, #236]	; (8000728 <main+0x164>)
 800063c:	fba2 2303 	umull	r2, r3, r2, r3
 8000640:	099b      	lsrs	r3, r3, #6
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fb0b 	bl	8000c5e <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000648:	2004      	movs	r0, #4
 800064a:	f000 fb15 	bl	8000c78 <HAL_SYSTICK_CLKSourceConfig>
	UART2_Init();
 800064e:	f000 f877 	bl	8000740 <UART2_Init>

	memset(msg,0,sizeof(msg));
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2264      	movs	r2, #100	; 0x64
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fb83 	bl	8002d64 <memset>
	sprintf(msg,"SYSCLK : %ld\r\n",HAL_RCC_GetSysClockFreq());
 800065e:	f000 fe75 	bl	800134c <HAL_RCC_GetSysClockFreq>
 8000662:	4602      	mov	r2, r0
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4931      	ldr	r1, [pc, #196]	; (800072c <main+0x168>)
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fb83 	bl	8002d74 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fdcd 	bl	8000210 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	1d39      	adds	r1, r7, #4
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	482b      	ldr	r0, [pc, #172]	; (8000730 <main+0x16c>)
 8000682:	f001 fb7e 	bl	8001d82 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2264      	movs	r2, #100	; 0x64
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fb69 	bl	8002d64 <memset>
	sprintf(msg,"HCLK : %ld\r\n",HAL_RCC_GetHCLKFreq());
 8000692:	f000 fe27 	bl	80012e4 <HAL_RCC_GetHCLKFreq>
 8000696:	4602      	mov	r2, r0
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4926      	ldr	r1, [pc, #152]	; (8000734 <main+0x170>)
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fb69 	bl	8002d74 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fdb3 	bl	8000210 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	1d39      	adds	r1, r7, #4
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	481e      	ldr	r0, [pc, #120]	; (8000730 <main+0x16c>)
 80006b6:	f001 fb64 	bl	8001d82 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2264      	movs	r2, #100	; 0x64
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fb4f 	bl	8002d64 <memset>
	sprintf(msg,"PCLK1 : %ld\r\n",HAL_RCC_GetPCLK1Freq());
 80006c6:	f000 fe19 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
 80006ca:	4602      	mov	r2, r0
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	491a      	ldr	r1, [pc, #104]	; (8000738 <main+0x174>)
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fb4f 	bl	8002d74 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd99 	bl	8000210 <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	1d39      	adds	r1, r7, #4
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	4811      	ldr	r0, [pc, #68]	; (8000730 <main+0x16c>)
 80006ea:	f001 fb4a 	bl	8001d82 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2264      	movs	r2, #100	; 0x64
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fb35 	bl	8002d64 <memset>
	sprintf(msg,"PCLK2 : %ld\r\n",HAL_RCC_GetPCLK2Freq());
 80006fa:	f000 fe13 	bl	8001324 <HAL_RCC_GetPCLK2Freq>
 80006fe:	4602      	mov	r2, r0
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	490e      	ldr	r1, [pc, #56]	; (800073c <main+0x178>)
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fb35 	bl	8002d74 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fd7f 	bl	8000210 <strlen>
 8000712:	4603      	mov	r3, r0
 8000714:	b29a      	uxth	r2, r3
 8000716:	1d39      	adds	r1, r7, #4
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <main+0x16c>)
 800071e:	f001 fb30 	bl	8001d82 <HAL_UART_Transmit>

	while(1);
 8000722:	e7fe      	b.n	8000722 <main+0x15e>
 8000724:	42470000 	.word	0x42470000
 8000728:	10624dd3 	.word	0x10624dd3
 800072c:	08003668 	.word	0x08003668
 8000730:	2000008c 	.word	0x2000008c
 8000734:	08003678 	.word	0x08003678
 8000738:	08003688 	.word	0x08003688
 800073c:	08003698 	.word	0x08003698

08000740 <UART2_Init>:




void UART2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	huart2.Instance=USART2;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <UART2_Init+0x44>)
 8000746:	4a10      	ldr	r2, [pc, #64]	; (8000788 <UART2_Init+0x48>)
 8000748:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate =115200;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <UART2_Init+0x44>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <UART2_Init+0x44>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits=UART_STOPBITS_1;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <UART2_Init+0x44>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity=UART_PARITY_NONE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <UART2_Init+0x44>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl=UART_HWCONTROL_NONE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <UART2_Init+0x44>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode=UART_MODE_TX_RX;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <UART2_Init+0x44>)
 800076c:	220c      	movs	r2, #12
 800076e:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart2)!=HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <UART2_Init+0x44>)
 8000772:	f001 fab9 	bl	8001ce8 <HAL_UART_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <UART2_Init+0x40>
	{
		//there is a problem
		Error_Handler();
 800077c:	f000 f806 	bl	800078c <Error_Handler>
	}
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000008c 	.word	0x2000008c
 8000788:	40004400 	.word	0x40004400

0800078c <Error_Handler>:


void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
	while(1);
 8000790:	e7fe      	b.n	8000790 <Error_Handler+0x4>
	...

08000794 <HAL_MspInit>:
 */
//low level initialisation
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_UART.h"
void HAL_MspInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);//1
 8000798:	2003      	movs	r0, #3
 800079a:	f000 fa2b 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>
	SCB->SHCSR |=0X7 << 16;//2)USAGE,memory,bus used
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <HAL_MspInit+0x40>)
 80007a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a2:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <HAL_MspInit+0x40>)
 80007a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80007a8:	6253      	str	r3, [r2, #36]	; 0x24
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	f06f 000b 	mvn.w	r0, #11
 80007b2:	f000 fa2a 	bl	8000c0a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	f06f 000a 	mvn.w	r0, #10
 80007be:	f000 fa24 	bl	8000c0a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	f06f 0009 	mvn.w	r0, #9
 80007ca:	f000 fa1e 	bl	8000c0a <HAL_NVIC_SetPriority>

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <HAL_UART_MspInit>:
void  HAL_UART_MspInit(UART_HandleTypeDef *huart)
{//here we are going ro do rthe low level initialization of pheripherals
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	__HAL_RCC_USART2_CLK_ENABLE(); // 1)enable clock for usart2
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <HAL_UART_MspInit+0x88>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <HAL_UART_MspInit+0x88>)
 80007ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ee:	6413      	str	r3, [r2, #64]	; 0x40
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <HAL_UART_MspInit+0x88>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();//CLOCK ENABLE FOR GPIO PIN
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_UART_MspInit+0x88>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	4a16      	ldr	r2, [pc, #88]	; (8000860 <HAL_UART_MspInit+0x88>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	6313      	str	r3, [r2, #48]	; 0x30
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_UART_MspInit+0x88>)
 800080e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

	//2nd step pin configuration
	gpio_uart.Pin =GPIO_PIN_2;
 8000818:	2304      	movs	r3, #4
 800081a:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode =GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull =GPIO_PULLUP;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate =GPIO_AF7_USART2;//uart2 tx
 8000828:	2307      	movs	r3, #7
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA,&gpio_uart);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <HAL_UART_MspInit+0x8c>)
 8000834:	f000 fadc 	bl	8000df0 <HAL_GPIO_Init>

	gpio_uart.Pin =GPIO_PIN_3;
 8000838:	2308      	movs	r3, #8
 800083a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA,&gpio_uart);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4808      	ldr	r0, [pc, #32]	; (8000864 <HAL_UART_MspInit+0x8c>)
 8000844:	f000 fad4 	bl	8000df0 <HAL_GPIO_Init>

	//3 enable irq it is optioal
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000848:	2026      	movs	r0, #38	; 0x26
 800084a:	f000 f9fa 	bl	8000c42 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800084e:	2200      	movs	r2, #0
 8000850:	210f      	movs	r1, #15
 8000852:	2026      	movs	r0, #38	; 0x26
 8000854:	f000 f9d9 	bl	8000c0a <HAL_NVIC_SetPriority>


}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000

08000868 <SysTick_Handler>:

#include "stm32f4xx_hal.h"
//Systick interrupt occurs at every 1 millisecond
extern UART_HandleTypeDef huart2;
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800086c:	f000 f8d2 	bl	8000a14 <HAL_IncTick>
	//TO  process the systik interrupt we call the cube api
	HAL_SYSTICK_IRQHandler();
 8000870:	f000 fa1e 	bl	8000cb0 <HAL_SYSTICK_IRQHandler>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <USART2_IRQHandler+0x10>)
 800087e:	f001 fb13 	bl	8001ea8 <HAL_UART_IRQHandler>
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000008c 	.word	0x2000008c

0800088c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <_sbrk+0x5c>)
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <_sbrk+0x60>)
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <_sbrk+0x64>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <_sbrk+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d207      	bcs.n	80008cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008bc:	f002 fa28 	bl	8002d10 <__errno>
 80008c0:	4603      	mov	r3, r0
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e009      	b.n	80008e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <_sbrk+0x64>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20020000 	.word	0x20020000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	200000d0 	.word	0x200000d0
 80008f4:	200000e8 	.word	0x200000e8

080008f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000938:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000946:	f7ff ffd7 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f002 f9e7 	bl	8002d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff fe39 	bl	80005c4 <main>
  bx  lr    
 8000952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000960:	08003704 	.word	0x08003704
  ldr r2, =_sbss
 8000964:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000968:	200000e8 	.word	0x200000e8

0800096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <HAL_Init+0x40>)
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_Init+0x40>)
 8000986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x40>)
 8000992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f92b 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff fef6 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023c00 	.word	0x40023c00

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f943 	bl	8000c5e <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 f90b 	bl	8000c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	200000d4 	.word	0x200000d4

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	200000d4 	.word	0x200000d4

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db0b      	blt.n	8000ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 021f 	and.w	r2, r3, #31
 8000ad0:	4907      	ldr	r1, [pc, #28]	; (8000af0 <__NVIC_EnableIRQ+0x38>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc0:	d301      	bcc.n	8000bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00f      	b.n	8000be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <SysTick_Config+0x40>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f7ff ff8e 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SysTick_Config+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Config+0x40>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff29 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff3e 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff8e 	bl	8000b48 <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5d 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff31 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffa2 	bl	8000bb0 <SysTick_Config>
 8000c6c:	4603      	mov	r3, r0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d106      	bne.n	8000c94 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000c92:	e005      	b.n	8000ca0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c9a:	f023 0304 	bic.w	r3, r3, #4
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000cb4:	f000 f802 	bl	8000cbc <HAL_SYSTICK_Callback>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff feb0 	bl	8000a3c <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d008      	beq.n	8000cfc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e052      	b.n	8000da2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 0216 	bic.w	r2, r2, #22
 8000d0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	695a      	ldr	r2, [r3, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d103      	bne.n	8000d2c <HAL_DMA_Abort+0x62>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d007      	beq.n	8000d3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0208 	bic.w	r2, r2, #8
 8000d3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 0201 	bic.w	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d4c:	e013      	b.n	8000d76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d4e:	f7ff fe75 	bl	8000a3c <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b05      	cmp	r3, #5
 8000d5a:	d90c      	bls.n	8000d76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2220      	movs	r2, #32
 8000d60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2203      	movs	r2, #3
 8000d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e015      	b.n	8000da2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1e4      	bne.n	8000d4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d88:	223f      	movs	r2, #63	; 0x3f
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d004      	beq.n	8000dc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e00c      	b.n	8000de2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2205      	movs	r2, #5
 8000dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0201 	bic.w	r2, r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	e165      	b.n	80010d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f040 8154 	bne.w	80010d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d005      	beq.n	8000e42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d130      	bne.n	8000ea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	091b      	lsrs	r3, r3, #4
 8000e8e:	f003 0201 	and.w	r2, r3, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d017      	beq.n	8000ee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d123      	bne.n	8000f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	220f      	movs	r2, #15
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	69b9      	ldr	r1, [r7, #24]
 8000f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0203 	and.w	r2, r3, #3
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80ae 	beq.w	80010d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b5d      	ldr	r3, [pc, #372]	; (80010f0 <HAL_GPIO_Init+0x300>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a5c      	ldr	r2, [pc, #368]	; (80010f0 <HAL_GPIO_Init+0x300>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b5a      	ldr	r3, [pc, #360]	; (80010f0 <HAL_GPIO_Init+0x300>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f92:	4a58      	ldr	r2, [pc, #352]	; (80010f4 <HAL_GPIO_Init+0x304>)
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4f      	ldr	r2, [pc, #316]	; (80010f8 <HAL_GPIO_Init+0x308>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d025      	beq.n	800100a <HAL_GPIO_Init+0x21a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4e      	ldr	r2, [pc, #312]	; (80010fc <HAL_GPIO_Init+0x30c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d01f      	beq.n	8001006 <HAL_GPIO_Init+0x216>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4d      	ldr	r2, [pc, #308]	; (8001100 <HAL_GPIO_Init+0x310>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x212>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4c      	ldr	r2, [pc, #304]	; (8001104 <HAL_GPIO_Init+0x314>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x20e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4b      	ldr	r2, [pc, #300]	; (8001108 <HAL_GPIO_Init+0x318>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x20a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4a      	ldr	r2, [pc, #296]	; (800110c <HAL_GPIO_Init+0x31c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x206>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a49      	ldr	r2, [pc, #292]	; (8001110 <HAL_GPIO_Init+0x320>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x202>
 8000fee:	2306      	movs	r3, #6
 8000ff0:	e00c      	b.n	800100c <HAL_GPIO_Init+0x21c>
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	e00a      	b.n	800100c <HAL_GPIO_Init+0x21c>
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	e008      	b.n	800100c <HAL_GPIO_Init+0x21c>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x21c>
 8000ffe:	2303      	movs	r3, #3
 8001000:	e004      	b.n	800100c <HAL_GPIO_Init+0x21c>
 8001002:	2302      	movs	r3, #2
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x21c>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x21c>
 800100a:	2300      	movs	r3, #0
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	f002 0203 	and.w	r2, r2, #3
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	4093      	lsls	r3, r2
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800101c:	4935      	ldr	r1, [pc, #212]	; (80010f4 <HAL_GPIO_Init+0x304>)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102a:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <HAL_GPIO_Init+0x324>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104e:	4a31      	ldr	r2, [pc, #196]	; (8001114 <HAL_GPIO_Init+0x324>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <HAL_GPIO_Init+0x324>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001078:	4a26      	ldr	r2, [pc, #152]	; (8001114 <HAL_GPIO_Init+0x324>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <HAL_GPIO_Init+0x324>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <HAL_GPIO_Init+0x324>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_GPIO_Init+0x324>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <HAL_GPIO_Init+0x324>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3301      	adds	r3, #1
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	f67f ae96 	bls.w	8000e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40013800 	.word	0x40013800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400
 8001100:	40020800 	.word	0x40020800
 8001104:	40020c00 	.word	0x40020c00
 8001108:	40021000 	.word	0x40021000
 800110c:	40021400 	.word	0x40021400
 8001110:	40021800 	.word	0x40021800
 8001114:	40013c00 	.word	0x40013c00

08001118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0cc      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800112c:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <HAL_RCC_ClockConfig+0x1b8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d90c      	bls.n	8001154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113a:	4b65      	ldr	r3, [pc, #404]	; (80012d0 <HAL_RCC_ClockConfig+0x1b8>)
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001142:	4b63      	ldr	r3, [pc, #396]	; (80012d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d001      	beq.n	8001154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0b8      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d020      	beq.n	80011a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800116c:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a58      	ldr	r2, [pc, #352]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001184:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800118e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001190:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	494d      	ldr	r1, [pc, #308]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d044      	beq.n	8001238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d107      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b6:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d119      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e07f      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d003      	beq.n	80011d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d107      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d6:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e06f      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e6:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e067      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f023 0203 	bic.w	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4934      	ldr	r1, [pc, #208]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	4313      	orrs	r3, r2
 8001206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001208:	f7ff fc18 	bl	8000a3c <HAL_GetTick>
 800120c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120e:	e00a      	b.n	8001226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001210:	f7ff fc14 	bl	8000a3c <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f241 3288 	movw	r2, #5000	; 0x1388
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e04f      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 020c 	and.w	r2, r3, #12
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	429a      	cmp	r2, r3
 8001236:	d1eb      	bne.n	8001210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <HAL_RCC_ClockConfig+0x1b8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 030f 	and.w	r3, r3, #15
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d20c      	bcs.n	8001260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d001      	beq.n	8001260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e032      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	4916      	ldr	r1, [pc, #88]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	4313      	orrs	r3, r2
 800127c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d009      	beq.n	800129e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	490e      	ldr	r1, [pc, #56]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	4313      	orrs	r3, r2
 800129c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800129e:	f000 f855 	bl	800134c <HAL_RCC_GetSysClockFreq>
 80012a2:	4602      	mov	r2, r0
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	490a      	ldr	r1, [pc, #40]	; (80012d8 <HAL_RCC_ClockConfig+0x1c0>)
 80012b0:	5ccb      	ldrb	r3, [r1, r3]
 80012b2:	fa22 f303 	lsr.w	r3, r2, r3
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_RCC_ClockConfig+0x1c8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fb78 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023c00 	.word	0x40023c00
 80012d4:	40023800 	.word	0x40023800
 80012d8:	080036a8 	.word	0x080036a8
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000004 	.word	0x20000004

080012e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000000 	.word	0x20000000

080012fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001300:	f7ff fff0 	bl	80012e4 <HAL_RCC_GetHCLKFreq>
 8001304:	4602      	mov	r2, r0
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	0a9b      	lsrs	r3, r3, #10
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	4903      	ldr	r1, [pc, #12]	; (8001320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001312:	5ccb      	ldrb	r3, [r1, r3]
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	080036b8 	.word	0x080036b8

08001324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001328:	f7ff ffdc 	bl	80012e4 <HAL_RCC_GetHCLKFreq>
 800132c:	4602      	mov	r2, r0
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	0b5b      	lsrs	r3, r3, #13
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	4903      	ldr	r1, [pc, #12]	; (8001348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800133a:	5ccb      	ldrb	r3, [r1, r3]
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	080036b8 	.word	0x080036b8

0800134c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800134c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001350:	b0ae      	sub	sp, #184	; 0xb8
 8001352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001372:	4bcb      	ldr	r3, [pc, #812]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b0c      	cmp	r3, #12
 800137c:	f200 8206 	bhi.w	800178c <HAL_RCC_GetSysClockFreq+0x440>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	080013bd 	.word	0x080013bd
 800138c:	0800178d 	.word	0x0800178d
 8001390:	0800178d 	.word	0x0800178d
 8001394:	0800178d 	.word	0x0800178d
 8001398:	080013c5 	.word	0x080013c5
 800139c:	0800178d 	.word	0x0800178d
 80013a0:	0800178d 	.word	0x0800178d
 80013a4:	0800178d 	.word	0x0800178d
 80013a8:	080013cd 	.word	0x080013cd
 80013ac:	0800178d 	.word	0x0800178d
 80013b0:	0800178d 	.word	0x0800178d
 80013b4:	0800178d 	.word	0x0800178d
 80013b8:	080015bd 	.word	0x080015bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013bc:	4bb9      	ldr	r3, [pc, #740]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80013be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80013c2:	e1e7      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013c4:	4bb8      	ldr	r3, [pc, #736]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013ca:	e1e3      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013cc:	4bb4      	ldr	r3, [pc, #720]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013d8:	4bb1      	ldr	r3, [pc, #708]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d071      	beq.n	80014c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e4:	4bae      	ldr	r3, [pc, #696]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	099b      	lsrs	r3, r3, #6
 80013ea:	2200      	movs	r2, #0
 80013ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80013f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80013f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800140a:	4622      	mov	r2, r4
 800140c:	462b      	mov	r3, r5
 800140e:	f04f 0000 	mov.w	r0, #0
 8001412:	f04f 0100 	mov.w	r1, #0
 8001416:	0159      	lsls	r1, r3, #5
 8001418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800141c:	0150      	lsls	r0, r2, #5
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4621      	mov	r1, r4
 8001424:	1a51      	subs	r1, r2, r1
 8001426:	6439      	str	r1, [r7, #64]	; 0x40
 8001428:	4629      	mov	r1, r5
 800142a:	eb63 0301 	sbc.w	r3, r3, r1
 800142e:	647b      	str	r3, [r7, #68]	; 0x44
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800143c:	4649      	mov	r1, r9
 800143e:	018b      	lsls	r3, r1, #6
 8001440:	4641      	mov	r1, r8
 8001442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001446:	4641      	mov	r1, r8
 8001448:	018a      	lsls	r2, r1, #6
 800144a:	4641      	mov	r1, r8
 800144c:	1a51      	subs	r1, r2, r1
 800144e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001450:	4649      	mov	r1, r9
 8001452:	eb63 0301 	sbc.w	r3, r3, r1
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001464:	4649      	mov	r1, r9
 8001466:	00cb      	lsls	r3, r1, #3
 8001468:	4641      	mov	r1, r8
 800146a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800146e:	4641      	mov	r1, r8
 8001470:	00ca      	lsls	r2, r1, #3
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	4603      	mov	r3, r0
 8001478:	4622      	mov	r2, r4
 800147a:	189b      	adds	r3, r3, r2
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
 800147e:	462b      	mov	r3, r5
 8001480:	460a      	mov	r2, r1
 8001482:	eb42 0303 	adc.w	r3, r2, r3
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001494:	4629      	mov	r1, r5
 8001496:	024b      	lsls	r3, r1, #9
 8001498:	4621      	mov	r1, r4
 800149a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800149e:	4621      	mov	r1, r4
 80014a0:	024a      	lsls	r2, r1, #9
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014aa:	2200      	movs	r2, #0
 80014ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014b8:	f7fe ff02 	bl	80002c0 <__aeabi_uldivmod>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4613      	mov	r3, r2
 80014c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014c6:	e067      	b.n	8001598 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c8:	4b75      	ldr	r3, [pc, #468]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	099b      	lsrs	r3, r3, #6
 80014ce:	2200      	movs	r2, #0
 80014d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80014d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80014e2:	2300      	movs	r3, #0
 80014e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80014ea:	4622      	mov	r2, r4
 80014ec:	462b      	mov	r3, r5
 80014ee:	f04f 0000 	mov.w	r0, #0
 80014f2:	f04f 0100 	mov.w	r1, #0
 80014f6:	0159      	lsls	r1, r3, #5
 80014f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014fc:	0150      	lsls	r0, r2, #5
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4621      	mov	r1, r4
 8001504:	1a51      	subs	r1, r2, r1
 8001506:	62b9      	str	r1, [r7, #40]	; 0x28
 8001508:	4629      	mov	r1, r5
 800150a:	eb63 0301 	sbc.w	r3, r3, r1
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800151c:	4649      	mov	r1, r9
 800151e:	018b      	lsls	r3, r1, #6
 8001520:	4641      	mov	r1, r8
 8001522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001526:	4641      	mov	r1, r8
 8001528:	018a      	lsls	r2, r1, #6
 800152a:	4641      	mov	r1, r8
 800152c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001530:	4649      	mov	r1, r9
 8001532:	eb63 0b01 	sbc.w	fp, r3, r1
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001542:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001546:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800154a:	4692      	mov	sl, r2
 800154c:	469b      	mov	fp, r3
 800154e:	4623      	mov	r3, r4
 8001550:	eb1a 0303 	adds.w	r3, sl, r3
 8001554:	623b      	str	r3, [r7, #32]
 8001556:	462b      	mov	r3, r5
 8001558:	eb4b 0303 	adc.w	r3, fp, r3
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800156a:	4629      	mov	r1, r5
 800156c:	028b      	lsls	r3, r1, #10
 800156e:	4621      	mov	r1, r4
 8001570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001574:	4621      	mov	r1, r4
 8001576:	028a      	lsls	r2, r1, #10
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001580:	2200      	movs	r2, #0
 8001582:	673b      	str	r3, [r7, #112]	; 0x70
 8001584:	677a      	str	r2, [r7, #116]	; 0x74
 8001586:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800158a:	f7fe fe99 	bl	80002c0 <__aeabi_uldivmod>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4613      	mov	r3, r2
 8001594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001598:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	0c1b      	lsrs	r3, r3, #16
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	3301      	adds	r3, #1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80015aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015ba:	e0eb      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015bc:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c8:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d06b      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	2200      	movs	r2, #0
 80015dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80015de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80015e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e6:	663b      	str	r3, [r7, #96]	; 0x60
 80015e8:	2300      	movs	r3, #0
 80015ea:	667b      	str	r3, [r7, #100]	; 0x64
 80015ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80015f0:	4622      	mov	r2, r4
 80015f2:	462b      	mov	r3, r5
 80015f4:	f04f 0000 	mov.w	r0, #0
 80015f8:	f04f 0100 	mov.w	r1, #0
 80015fc:	0159      	lsls	r1, r3, #5
 80015fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001602:	0150      	lsls	r0, r2, #5
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4621      	mov	r1, r4
 800160a:	1a51      	subs	r1, r2, r1
 800160c:	61b9      	str	r1, [r7, #24]
 800160e:	4629      	mov	r1, r5
 8001610:	eb63 0301 	sbc.w	r3, r3, r1
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001622:	4659      	mov	r1, fp
 8001624:	018b      	lsls	r3, r1, #6
 8001626:	4651      	mov	r1, sl
 8001628:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800162c:	4651      	mov	r1, sl
 800162e:	018a      	lsls	r2, r1, #6
 8001630:	4651      	mov	r1, sl
 8001632:	ebb2 0801 	subs.w	r8, r2, r1
 8001636:	4659      	mov	r1, fp
 8001638:	eb63 0901 	sbc.w	r9, r3, r1
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001648:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800164c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001650:	4690      	mov	r8, r2
 8001652:	4699      	mov	r9, r3
 8001654:	4623      	mov	r3, r4
 8001656:	eb18 0303 	adds.w	r3, r8, r3
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	462b      	mov	r3, r5
 800165e:	eb49 0303 	adc.w	r3, r9, r3
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001670:	4629      	mov	r1, r5
 8001672:	024b      	lsls	r3, r1, #9
 8001674:	4621      	mov	r1, r4
 8001676:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800167a:	4621      	mov	r1, r4
 800167c:	024a      	lsls	r2, r1, #9
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001686:	2200      	movs	r2, #0
 8001688:	65bb      	str	r3, [r7, #88]	; 0x58
 800168a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800168c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001690:	f7fe fe16 	bl	80002c0 <__aeabi_uldivmod>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4613      	mov	r3, r2
 800169a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800169e:	e065      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x420>
 80016a0:	40023800 	.word	0x40023800
 80016a4:	00f42400 	.word	0x00f42400
 80016a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ac:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	2200      	movs	r2, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	4611      	mov	r1, r2
 80016b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016bc:	653b      	str	r3, [r7, #80]	; 0x50
 80016be:	2300      	movs	r3, #0
 80016c0:	657b      	str	r3, [r7, #84]	; 0x54
 80016c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016c6:	4642      	mov	r2, r8
 80016c8:	464b      	mov	r3, r9
 80016ca:	f04f 0000 	mov.w	r0, #0
 80016ce:	f04f 0100 	mov.w	r1, #0
 80016d2:	0159      	lsls	r1, r3, #5
 80016d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d8:	0150      	lsls	r0, r2, #5
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4641      	mov	r1, r8
 80016e0:	1a51      	subs	r1, r2, r1
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	4649      	mov	r1, r9
 80016e6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016f8:	4659      	mov	r1, fp
 80016fa:	018b      	lsls	r3, r1, #6
 80016fc:	4651      	mov	r1, sl
 80016fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001702:	4651      	mov	r1, sl
 8001704:	018a      	lsls	r2, r1, #6
 8001706:	4651      	mov	r1, sl
 8001708:	1a54      	subs	r4, r2, r1
 800170a:	4659      	mov	r1, fp
 800170c:	eb63 0501 	sbc.w	r5, r3, r1
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	00eb      	lsls	r3, r5, #3
 800171a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800171e:	00e2      	lsls	r2, r4, #3
 8001720:	4614      	mov	r4, r2
 8001722:	461d      	mov	r5, r3
 8001724:	4643      	mov	r3, r8
 8001726:	18e3      	adds	r3, r4, r3
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	464b      	mov	r3, r9
 800172c:	eb45 0303 	adc.w	r3, r5, r3
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800173e:	4629      	mov	r1, r5
 8001740:	028b      	lsls	r3, r1, #10
 8001742:	4621      	mov	r1, r4
 8001744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001748:	4621      	mov	r1, r4
 800174a:	028a      	lsls	r2, r1, #10
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001754:	2200      	movs	r2, #0
 8001756:	64bb      	str	r3, [r7, #72]	; 0x48
 8001758:	64fa      	str	r2, [r7, #76]	; 0x4c
 800175a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800175e:	f7fe fdaf 	bl	80002c0 <__aeabi_uldivmod>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4613      	mov	r3, r2
 8001768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	0f1b      	lsrs	r3, r3, #28
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800177a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800177e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800178a:	e003      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800178e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001792:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001794:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001798:	4618      	mov	r0, r3
 800179a:	37b8      	adds	r7, #184	; 0xb8
 800179c:	46bd      	mov	sp, r7
 800179e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	00f42400 	.word	0x00f42400

080017ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e28d      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8083 	beq.w	80018d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017cc:	4b94      	ldr	r3, [pc, #592]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d019      	beq.n	800180c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017d8:	4b91      	ldr	r3, [pc, #580]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017e4:	4b8e      	ldr	r3, [pc, #568]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017f0:	d00c      	beq.n	800180c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f2:	4b8b      	ldr	r3, [pc, #556]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d112      	bne.n	8001824 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fe:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800180a:	d10b      	bne.n	8001824 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	4b84      	ldr	r3, [pc, #528]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d05b      	beq.n	80018d0 <HAL_RCC_OscConfig+0x124>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d157      	bne.n	80018d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e25a      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182c:	d106      	bne.n	800183c <HAL_RCC_OscConfig+0x90>
 800182e:	4b7c      	ldr	r3, [pc, #496]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a7b      	ldr	r2, [pc, #492]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xcc>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0xb4>
 8001846:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a75      	ldr	r2, [pc, #468]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b73      	ldr	r3, [pc, #460]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a72      	ldr	r2, [pc, #456]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xcc>
 8001860:	4b6f      	ldr	r3, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6e      	ldr	r2, [pc, #440]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b6c      	ldr	r3, [pc, #432]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6b      	ldr	r2, [pc, #428]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff f8dc 	bl	8000a3c <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff f8d8 	bl	8000a3c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e21f      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	4b61      	ldr	r3, [pc, #388]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xdc>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff f8c8 	bl	8000a3c <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff f8c4 	bl	8000a3c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e20b      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x104>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d06f      	beq.n	80019be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018de:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d017      	beq.n	800191a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018ea:	4b4d      	ldr	r3, [pc, #308]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d105      	bne.n	8001902 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018f6:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d11c      	bne.n	8001948 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190e:	4b44      	ldr	r3, [pc, #272]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x186>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e1d3      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4937      	ldr	r1, [pc, #220]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	e03a      	b.n	80019be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_RCC_OscConfig+0x278>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff f871 	bl	8000a3c <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff f86d 	bl	8000a3c <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1b4      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4925      	ldr	r1, [pc, #148]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_OscConfig+0x278>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff f850 	bl	8000a3c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff f84c 	bl	8000a3c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e193      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d036      	beq.n	8001a38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d016      	beq.n	8001a00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_RCC_OscConfig+0x27c>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f7ff f830 	bl	8000a3c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff f82c 	bl	8000a3c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e173      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 80019f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x234>
 80019fe:	e01b      	b.n	8001a38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_OscConfig+0x27c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7ff f819 	bl	8000a3c <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	e00e      	b.n	8001a2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff f815 	bl	8000a3c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d907      	bls.n	8001a2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e15c      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	42470000 	.word	0x42470000
 8001a28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2c:	4b8a      	ldr	r3, [pc, #552]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1ea      	bne.n	8001a0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8097 	beq.w	8001b74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4a:	4b83      	ldr	r3, [pc, #524]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	4b7f      	ldr	r3, [pc, #508]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a7e      	ldr	r2, [pc, #504]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a72:	2301      	movs	r3, #1
 8001a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a76:	4b79      	ldr	r3, [pc, #484]	; (8001c5c <HAL_RCC_OscConfig+0x4b0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d118      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a82:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <HAL_RCC_OscConfig+0x4b0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a75      	ldr	r2, [pc, #468]	; (8001c5c <HAL_RCC_OscConfig+0x4b0>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8e:	f7fe ffd5 	bl	8000a3c <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a96:	f7fe ffd1 	bl	8000a3c <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e118      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	4b6c      	ldr	r3, [pc, #432]	; (8001c5c <HAL_RCC_OscConfig+0x4b0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x31e>
 8001abc:	4b66      	ldr	r3, [pc, #408]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac0:	4a65      	ldr	r2, [pc, #404]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac8:	e01c      	b.n	8001b04 <HAL_RCC_OscConfig+0x358>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x340>
 8001ad2:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a60      	ldr	r2, [pc, #384]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ade:	4b5e      	ldr	r3, [pc, #376]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	4a5d      	ldr	r2, [pc, #372]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0x358>
 8001aec:	4b5a      	ldr	r3, [pc, #360]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a59      	ldr	r2, [pc, #356]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
 8001af8:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afc:	4a56      	ldr	r2, [pc, #344]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001afe:	f023 0304 	bic.w	r3, r3, #4
 8001b02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d015      	beq.n	8001b38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7fe ff96 	bl	8000a3c <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b14:	f7fe ff92 	bl	8000a3c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e0d7      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0ee      	beq.n	8001b14 <HAL_RCC_OscConfig+0x368>
 8001b36:	e014      	b.n	8001b62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7fe ff80 	bl	8000a3c <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7fe ff7c 	bl	8000a3c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0c1      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b56:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ee      	bne.n	8001b40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b68:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	4a3a      	ldr	r2, [pc, #232]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80ad 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b7e:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d060      	beq.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d145      	bne.n	8001c1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <HAL_RCC_OscConfig+0x4b4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7fe ff50 	bl	8000a3c <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7fe ff4c 	bl	8000a3c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e093      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69da      	ldr	r2, [r3, #28]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	019b      	lsls	r3, r3, #6
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	041b      	lsls	r3, r3, #16
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	061b      	lsls	r3, r3, #24
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	071b      	lsls	r3, r3, #28
 8001bea:	491b      	ldr	r1, [pc, #108]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_RCC_OscConfig+0x4b4>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7fe ff21 	bl	8000a3c <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7fe ff1d 	bl	8000a3c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e064      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x452>
 8001c1c:	e05c      	b.n	8001cd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_RCC_OscConfig+0x4b4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7fe ff0a 	bl	8000a3c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7fe ff06 	bl	8000a3c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e04d      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x480>
 8001c4a:	e045      	b.n	8001cd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e040      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <HAL_RCC_OscConfig+0x538>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d030      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d129      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d122      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c94:	4013      	ands	r3, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d119      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	085b      	lsrs	r3, r3, #1
 8001cac:	3b01      	subs	r3, #1
 8001cae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d10f      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e03f      	b.n	8001d7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7fe fd62 	bl	80007d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2224      	movs	r2, #36	; 0x24
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fd7b 	bl	8002828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695a      	ldr	r2, [r3, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b08a      	sub	sp, #40	; 0x28
 8001d86:	af02      	add	r7, sp, #8
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d17c      	bne.n	8001e9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_UART_Transmit+0x2c>
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e075      	b.n	8001e9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_UART_Transmit+0x3e>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e06e      	b.n	8001e9e <HAL_UART_Transmit+0x11c>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2221      	movs	r2, #33	; 0x21
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dd6:	f7fe fe31 	bl	8000a3c <HAL_GetTick>
 8001dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	88fa      	ldrh	r2, [r7, #6]
 8001de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001df0:	d108      	bne.n	8001e04 <HAL_UART_Transmit+0x82>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d104      	bne.n	8001e04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	e003      	b.n	8001e0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e14:	e02a      	b.n	8001e6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2180      	movs	r1, #128	; 0x80
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 faf9 	bl	8002418 <UART_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e036      	b.n	8001e9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10b      	bne.n	8001e4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	3302      	adds	r3, #2
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e007      	b.n	8001e5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1cf      	bne.n	8001e16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2140      	movs	r1, #64	; 0x40
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fac9 	bl	8002418 <UART_WaitOnFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e006      	b.n	8001e9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
  }
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0ba      	sub	sp, #232	; 0xe8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10f      	bne.n	8001f0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_UART_IRQHandler+0x66>
 8001efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fbd3 	bl	80026b2 <UART_Receive_IT>
      return;
 8001f0c:	e256      	b.n	80023bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80de 	beq.w	80020d4 <HAL_UART_IRQHandler+0x22c>
 8001f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80d1 	beq.w	80020d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_UART_IRQHandler+0xae>
 8001f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_UART_IRQHandler+0xd2>
 8001f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f043 0202 	orr.w	r2, r3, #2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_UART_IRQHandler+0xf6>
 8001f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f043 0204 	orr.w	r2, r3, #4
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d011      	beq.n	8001fce <HAL_UART_IRQHandler+0x126>
 8001faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f043 0208 	orr.w	r2, r3, #8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 81ed 	beq.w	80023b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_UART_IRQHandler+0x14e>
 8001fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fb5e 	bl	80026b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002000:	2b40      	cmp	r3, #64	; 0x40
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <HAL_UART_IRQHandler+0x17a>
 800201a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800201e:	2b00      	cmp	r3, #0
 8002020:	d04f      	beq.n	80020c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fa66 	bl	80024f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002032:	2b40      	cmp	r3, #64	; 0x40
 8002034:	d141      	bne.n	80020ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3314      	adds	r3, #20
 800203c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002040:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002044:	e853 3f00 	ldrex	r3, [r3]
 8002048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800204c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3314      	adds	r3, #20
 800205e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002062:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800206e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002072:	e841 2300 	strex	r3, r2, [r1]
 8002076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800207a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1d9      	bne.n	8002036 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	2b00      	cmp	r3, #0
 8002088:	d013      	beq.n	80020b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	4a7d      	ldr	r2, [pc, #500]	; (8002284 <HAL_UART_IRQHandler+0x3dc>)
 8002090:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fe87 	bl	8000daa <HAL_DMA_Abort_IT>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d016      	beq.n	80020d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020ac:	4610      	mov	r0, r2
 80020ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b0:	e00e      	b.n	80020d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f99a 	bl	80023ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b8:	e00a      	b.n	80020d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f996 	bl	80023ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c0:	e006      	b.n	80020d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f992 	bl	80023ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80020ce:	e170      	b.n	80023b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d0:	bf00      	nop
    return;
 80020d2:	e16e      	b.n	80023b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	2b01      	cmp	r3, #1
 80020da:	f040 814a 	bne.w	8002372 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8143 	beq.w	8002372 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 813c 	beq.w	8002372 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	f040 80b4 	bne.w	8002288 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800212c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8140 	beq.w	80023b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800213a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800213e:	429a      	cmp	r2, r3
 8002140:	f080 8139 	bcs.w	80023b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800214a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002156:	f000 8088 	beq.w	800226a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	330c      	adds	r3, #12
 8002160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002168:	e853 3f00 	ldrex	r3, [r3]
 800216c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002186:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800218a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002192:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002196:	e841 2300 	strex	r3, r2, [r1]
 800219a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800219e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1d9      	bne.n	800215a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3314      	adds	r3, #20
 80021ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b0:	e853 3f00 	ldrex	r3, [r3]
 80021b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80021b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3314      	adds	r3, #20
 80021c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80021ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80021d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021d6:	e841 2300 	strex	r3, r2, [r1]
 80021da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80021dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1e1      	bne.n	80021a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3314      	adds	r3, #20
 80021e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ec:	e853 3f00 	ldrex	r3, [r3]
 80021f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80021f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3314      	adds	r3, #20
 8002202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002206:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002208:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800220c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800220e:	e841 2300 	strex	r3, r2, [r1]
 8002212:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1e3      	bne.n	80021e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	330c      	adds	r3, #12
 800222e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002232:	e853 3f00 	ldrex	r3, [r3]
 8002236:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800223a:	f023 0310 	bic.w	r3, r3, #16
 800223e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	330c      	adds	r3, #12
 8002248:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800224c:	65ba      	str	r2, [r7, #88]	; 0x58
 800224e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002250:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002252:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002254:	e841 2300 	strex	r3, r2, [r1]
 8002258:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800225a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e3      	bne.n	8002228 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fd30 	bl	8000cca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002272:	b29b      	uxth	r3, r3
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	b29b      	uxth	r3, r3
 8002278:	4619      	mov	r1, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f8c0 	bl	8002400 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002280:	e099      	b.n	80023b6 <HAL_UART_IRQHandler+0x50e>
 8002282:	bf00      	nop
 8002284:	080025bb 	.word	0x080025bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002290:	b29b      	uxth	r3, r3
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 808b 	beq.w	80023ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80022a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8086 	beq.w	80023ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	330c      	adds	r3, #12
 80022b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b8:	e853 3f00 	ldrex	r3, [r3]
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80022be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	330c      	adds	r3, #12
 80022ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80022d2:	647a      	str	r2, [r7, #68]	; 0x44
 80022d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022da:	e841 2300 	strex	r3, r2, [r1]
 80022de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80022e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1e3      	bne.n	80022ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	3314      	adds	r3, #20
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	e853 3f00 	ldrex	r3, [r3]
 80022f4:	623b      	str	r3, [r7, #32]
   return(result);
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3314      	adds	r3, #20
 8002306:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800230a:	633a      	str	r2, [r7, #48]	; 0x30
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002312:	e841 2300 	strex	r3, r2, [r1]
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1e3      	bne.n	80022e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	330c      	adds	r3, #12
 8002332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	e853 3f00 	ldrex	r3, [r3]
 800233a:	60fb      	str	r3, [r7, #12]
   return(result);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 0310 	bic.w	r3, r3, #16
 8002342:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002350:	61fa      	str	r2, [r7, #28]
 8002352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002354:	69b9      	ldr	r1, [r7, #24]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	e841 2300 	strex	r3, r2, [r1]
 800235c:	617b      	str	r3, [r7, #20]
   return(result);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e3      	bne.n	800232c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002364:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002368:	4619      	mov	r1, r3
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f848 	bl	8002400 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002370:	e023      	b.n	80023ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_UART_IRQHandler+0x4ea>
 800237e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f929 	bl	80025e2 <UART_Transmit_IT>
    return;
 8002390:	e014      	b.n	80023bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00e      	beq.n	80023bc <HAL_UART_IRQHandler+0x514>
 800239e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f969 	bl	8002682 <UART_EndTransmit_IT>
    return;
 80023b0:	e004      	b.n	80023bc <HAL_UART_IRQHandler+0x514>
    return;
 80023b2:	bf00      	nop
 80023b4:	e002      	b.n	80023bc <HAL_UART_IRQHandler+0x514>
      return;
 80023b6:	bf00      	nop
 80023b8:	e000      	b.n	80023bc <HAL_UART_IRQHandler+0x514>
      return;
 80023ba:	bf00      	nop
  }
}
 80023bc:	37e8      	adds	r7, #232	; 0xe8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop

080023c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b090      	sub	sp, #64	; 0x40
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002428:	e050      	b.n	80024cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d04c      	beq.n	80024cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002434:	2b00      	cmp	r3, #0
 8002436:	d007      	beq.n	8002448 <UART_WaitOnFlagUntilTimeout+0x30>
 8002438:	f7fe fb00 	bl	8000a3c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002444:	429a      	cmp	r2, r3
 8002446:	d241      	bcs.n	80024cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	330c      	adds	r3, #12
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	e853 3f00 	ldrex	r3, [r3]
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800245e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	330c      	adds	r3, #12
 8002466:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002468:	637a      	str	r2, [r7, #52]	; 0x34
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800246e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002470:	e841 2300 	strex	r3, r2, [r1]
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e5      	bne.n	8002448 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3314      	adds	r3, #20
 8002482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	e853 3f00 	ldrex	r3, [r3]
 800248a:	613b      	str	r3, [r7, #16]
   return(result);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3314      	adds	r3, #20
 800249a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800249c:	623a      	str	r2, [r7, #32]
 800249e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a0:	69f9      	ldr	r1, [r7, #28]
 80024a2:	6a3a      	ldr	r2, [r7, #32]
 80024a4:	e841 2300 	strex	r3, r2, [r1]
 80024a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e5      	bne.n	800247c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e00f      	b.n	80024ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	4013      	ands	r3, r2
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d09f      	beq.n	800242a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3740      	adds	r7, #64	; 0x40
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b095      	sub	sp, #84	; 0x54
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	330c      	adds	r3, #12
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002506:	e853 3f00 	ldrex	r3, [r3]
 800250a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	330c      	adds	r3, #12
 800251a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800251c:	643a      	str	r2, [r7, #64]	; 0x40
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002520:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002522:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002524:	e841 2300 	strex	r3, r2, [r1]
 8002528:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800252a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1e5      	bne.n	80024fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3314      	adds	r3, #20
 8002536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	e853 3f00 	ldrex	r3, [r3]
 800253e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	64bb      	str	r3, [r7, #72]	; 0x48
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3314      	adds	r3, #20
 800254e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002550:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002558:	e841 2300 	strex	r3, r2, [r1]
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1e5      	bne.n	8002530 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	2b01      	cmp	r3, #1
 800256a:	d119      	bne.n	80025a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	330c      	adds	r3, #12
 8002572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	e853 3f00 	ldrex	r3, [r3]
 800257a:	60bb      	str	r3, [r7, #8]
   return(result);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f023 0310 	bic.w	r3, r3, #16
 8002582:	647b      	str	r3, [r7, #68]	; 0x44
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800258c:	61ba      	str	r2, [r7, #24]
 800258e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002590:	6979      	ldr	r1, [r7, #20]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	e841 2300 	strex	r3, r2, [r1]
 8002598:	613b      	str	r3, [r7, #16]
   return(result);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e5      	bne.n	800256c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025ae:	bf00      	nop
 80025b0:	3754      	adds	r7, #84	; 0x54
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff ff09 	bl	80023ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b21      	cmp	r3, #33	; 0x21
 80025f4:	d13e      	bne.n	8002674 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fe:	d114      	bne.n	800262a <UART_Transmit_IT+0x48>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d110      	bne.n	800262a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800261c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	1c9a      	adds	r2, r3, #2
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	621a      	str	r2, [r3, #32]
 8002628:	e008      	b.n	800263c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	1c59      	adds	r1, r3, #1
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6211      	str	r1, [r2, #32]
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29b      	uxth	r3, r3
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4619      	mov	r1, r3
 800264a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10f      	bne.n	8002670 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800265e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800266e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002698:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fe8e 	bl	80023c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b08c      	sub	sp, #48	; 0x30
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b22      	cmp	r3, #34	; 0x22
 80026c4:	f040 80ab 	bne.w	800281e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d0:	d117      	bne.n	8002702 <UART_Receive_IT+0x50>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d113      	bne.n	8002702 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	1c9a      	adds	r2, r3, #2
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002700:	e026      	b.n	8002750 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002708:	2300      	movs	r3, #0
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002714:	d007      	beq.n	8002726 <UART_Receive_IT+0x74>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10a      	bne.n	8002734 <UART_Receive_IT+0x82>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	e008      	b.n	8002746 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002740:	b2da      	uxtb	r2, r3
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29b      	uxth	r3, r3
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4619      	mov	r1, r3
 800275e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002760:	2b00      	cmp	r3, #0
 8002762:	d15a      	bne.n	800281a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0220 	bic.w	r2, r2, #32
 8002772:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002782:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d135      	bne.n	8002810 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	330c      	adds	r3, #12
 80027b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	e853 3f00 	ldrex	r3, [r3]
 80027b8:	613b      	str	r3, [r7, #16]
   return(result);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f023 0310 	bic.w	r3, r3, #16
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	330c      	adds	r3, #12
 80027c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ca:	623a      	str	r2, [r7, #32]
 80027cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ce:	69f9      	ldr	r1, [r7, #28]
 80027d0:	6a3a      	ldr	r2, [r7, #32]
 80027d2:	e841 2300 	strex	r3, r2, [r1]
 80027d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1e5      	bne.n	80027aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d10a      	bne.n	8002802 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002806:	4619      	mov	r1, r3
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff fdf9 	bl	8002400 <HAL_UARTEx_RxEventCallback>
 800280e:	e002      	b.n	8002816 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fde1 	bl	80023d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e002      	b.n	8002820 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800281e:	2302      	movs	r3, #2
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	3730      	adds	r7, #48	; 0x30
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800282c:	b0c0      	sub	sp, #256	; 0x100
 800282e:	af00      	add	r7, sp, #0
 8002830:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002844:	68d9      	ldr	r1, [r3, #12]
 8002846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	ea40 0301 	orr.w	r3, r0, r1
 8002850:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	431a      	orrs	r2, r3
 8002860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	431a      	orrs	r2, r3
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002880:	f021 010c 	bic.w	r1, r1, #12
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800288e:	430b      	orrs	r3, r1
 8002890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800289e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a2:	6999      	ldr	r1, [r3, #24]
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	ea40 0301 	orr.w	r3, r0, r1
 80028ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b8f      	ldr	r3, [pc, #572]	; (8002af4 <UART_SetConfig+0x2cc>)
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d005      	beq.n	80028c8 <UART_SetConfig+0xa0>
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4b8d      	ldr	r3, [pc, #564]	; (8002af8 <UART_SetConfig+0x2d0>)
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d104      	bne.n	80028d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028c8:	f7fe fd2c 	bl	8001324 <HAL_RCC_GetPCLK2Freq>
 80028cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80028d0:	e003      	b.n	80028da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028d2:	f7fe fd13 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
 80028d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e4:	f040 810c 	bne.w	8002b00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ec:	2200      	movs	r2, #0
 80028ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80028fa:	4622      	mov	r2, r4
 80028fc:	462b      	mov	r3, r5
 80028fe:	1891      	adds	r1, r2, r2
 8002900:	65b9      	str	r1, [r7, #88]	; 0x58
 8002902:	415b      	adcs	r3, r3
 8002904:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800290a:	4621      	mov	r1, r4
 800290c:	eb12 0801 	adds.w	r8, r2, r1
 8002910:	4629      	mov	r1, r5
 8002912:	eb43 0901 	adc.w	r9, r3, r1
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800292a:	4690      	mov	r8, r2
 800292c:	4699      	mov	r9, r3
 800292e:	4623      	mov	r3, r4
 8002930:	eb18 0303 	adds.w	r3, r8, r3
 8002934:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002938:	462b      	mov	r3, r5
 800293a:	eb49 0303 	adc.w	r3, r9, r3
 800293e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800294e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002956:	460b      	mov	r3, r1
 8002958:	18db      	adds	r3, r3, r3
 800295a:	653b      	str	r3, [r7, #80]	; 0x50
 800295c:	4613      	mov	r3, r2
 800295e:	eb42 0303 	adc.w	r3, r2, r3
 8002962:	657b      	str	r3, [r7, #84]	; 0x54
 8002964:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002968:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800296c:	f7fd fca8 	bl	80002c0 <__aeabi_uldivmod>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4b61      	ldr	r3, [pc, #388]	; (8002afc <UART_SetConfig+0x2d4>)
 8002976:	fba3 2302 	umull	r2, r3, r3, r2
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	011c      	lsls	r4, r3, #4
 800297e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002982:	2200      	movs	r2, #0
 8002984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002988:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800298c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002990:	4642      	mov	r2, r8
 8002992:	464b      	mov	r3, r9
 8002994:	1891      	adds	r1, r2, r2
 8002996:	64b9      	str	r1, [r7, #72]	; 0x48
 8002998:	415b      	adcs	r3, r3
 800299a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800299c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029a0:	4641      	mov	r1, r8
 80029a2:	eb12 0a01 	adds.w	sl, r2, r1
 80029a6:	4649      	mov	r1, r9
 80029a8:	eb43 0b01 	adc.w	fp, r3, r1
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029c0:	4692      	mov	sl, r2
 80029c2:	469b      	mov	fp, r3
 80029c4:	4643      	mov	r3, r8
 80029c6:	eb1a 0303 	adds.w	r3, sl, r3
 80029ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029ce:	464b      	mov	r3, r9
 80029d0:	eb4b 0303 	adc.w	r3, fp, r3
 80029d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029ec:	460b      	mov	r3, r1
 80029ee:	18db      	adds	r3, r3, r3
 80029f0:	643b      	str	r3, [r7, #64]	; 0x40
 80029f2:	4613      	mov	r3, r2
 80029f4:	eb42 0303 	adc.w	r3, r2, r3
 80029f8:	647b      	str	r3, [r7, #68]	; 0x44
 80029fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a02:	f7fd fc5d 	bl	80002c0 <__aeabi_uldivmod>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <UART_SetConfig+0x2d4>)
 8002a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	2264      	movs	r2, #100	; 0x64
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	1acb      	subs	r3, r1, r3
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a22:	4b36      	ldr	r3, [pc, #216]	; (8002afc <UART_SetConfig+0x2d4>)
 8002a24:	fba3 2302 	umull	r2, r3, r3, r2
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a30:	441c      	add	r4, r3
 8002a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a44:	4642      	mov	r2, r8
 8002a46:	464b      	mov	r3, r9
 8002a48:	1891      	adds	r1, r2, r2
 8002a4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a4c:	415b      	adcs	r3, r3
 8002a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a54:	4641      	mov	r1, r8
 8002a56:	1851      	adds	r1, r2, r1
 8002a58:	6339      	str	r1, [r7, #48]	; 0x30
 8002a5a:	4649      	mov	r1, r9
 8002a5c:	414b      	adcs	r3, r1
 8002a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a6c:	4659      	mov	r1, fp
 8002a6e:	00cb      	lsls	r3, r1, #3
 8002a70:	4651      	mov	r1, sl
 8002a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a76:	4651      	mov	r1, sl
 8002a78:	00ca      	lsls	r2, r1, #3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4642      	mov	r2, r8
 8002a82:	189b      	adds	r3, r3, r2
 8002a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a88:	464b      	mov	r3, r9
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	eb42 0303 	adc.w	r3, r2, r3
 8002a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002aa0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002aa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	18db      	adds	r3, r3, r3
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aae:	4613      	mov	r3, r2
 8002ab0:	eb42 0303 	adc.w	r3, r2, r3
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002aba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002abe:	f7fd fbff 	bl	80002c0 <__aeabi_uldivmod>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <UART_SetConfig+0x2d4>)
 8002ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	2164      	movs	r1, #100	; 0x64
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	3332      	adds	r3, #50	; 0x32
 8002ada:	4a08      	ldr	r2, [pc, #32]	; (8002afc <UART_SetConfig+0x2d4>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	f003 0207 	and.w	r2, r3, #7
 8002ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4422      	add	r2, r4
 8002aee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002af0:	e105      	b.n	8002cfe <UART_SetConfig+0x4d6>
 8002af2:	bf00      	nop
 8002af4:	40011000 	.word	0x40011000
 8002af8:	40011400 	.word	0x40011400
 8002afc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b04:	2200      	movs	r2, #0
 8002b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b12:	4642      	mov	r2, r8
 8002b14:	464b      	mov	r3, r9
 8002b16:	1891      	adds	r1, r2, r2
 8002b18:	6239      	str	r1, [r7, #32]
 8002b1a:	415b      	adcs	r3, r3
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b22:	4641      	mov	r1, r8
 8002b24:	1854      	adds	r4, r2, r1
 8002b26:	4649      	mov	r1, r9
 8002b28:	eb43 0501 	adc.w	r5, r3, r1
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	00eb      	lsls	r3, r5, #3
 8002b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b3a:	00e2      	lsls	r2, r4, #3
 8002b3c:	4614      	mov	r4, r2
 8002b3e:	461d      	mov	r5, r3
 8002b40:	4643      	mov	r3, r8
 8002b42:	18e3      	adds	r3, r4, r3
 8002b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b48:	464b      	mov	r3, r9
 8002b4a:	eb45 0303 	adc.w	r3, r5, r3
 8002b4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b6e:	4629      	mov	r1, r5
 8002b70:	008b      	lsls	r3, r1, #2
 8002b72:	4621      	mov	r1, r4
 8002b74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b78:	4621      	mov	r1, r4
 8002b7a:	008a      	lsls	r2, r1, #2
 8002b7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b80:	f7fd fb9e 	bl	80002c0 <__aeabi_uldivmod>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4b60      	ldr	r3, [pc, #384]	; (8002d0c <UART_SetConfig+0x4e4>)
 8002b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	011c      	lsls	r4, r3, #4
 8002b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b96:	2200      	movs	r2, #0
 8002b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ba0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ba4:	4642      	mov	r2, r8
 8002ba6:	464b      	mov	r3, r9
 8002ba8:	1891      	adds	r1, r2, r2
 8002baa:	61b9      	str	r1, [r7, #24]
 8002bac:	415b      	adcs	r3, r3
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb4:	4641      	mov	r1, r8
 8002bb6:	1851      	adds	r1, r2, r1
 8002bb8:	6139      	str	r1, [r7, #16]
 8002bba:	4649      	mov	r1, r9
 8002bbc:	414b      	adcs	r3, r1
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bcc:	4659      	mov	r1, fp
 8002bce:	00cb      	lsls	r3, r1, #3
 8002bd0:	4651      	mov	r1, sl
 8002bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bd6:	4651      	mov	r1, sl
 8002bd8:	00ca      	lsls	r2, r1, #3
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4603      	mov	r3, r0
 8002be0:	4642      	mov	r2, r8
 8002be2:	189b      	adds	r3, r3, r2
 8002be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002be8:	464b      	mov	r3, r9
 8002bea:	460a      	mov	r2, r1
 8002bec:	eb42 0303 	adc.w	r3, r2, r3
 8002bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c0c:	4649      	mov	r1, r9
 8002c0e:	008b      	lsls	r3, r1, #2
 8002c10:	4641      	mov	r1, r8
 8002c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c16:	4641      	mov	r1, r8
 8002c18:	008a      	lsls	r2, r1, #2
 8002c1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c1e:	f7fd fb4f 	bl	80002c0 <__aeabi_uldivmod>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <UART_SetConfig+0x4e4>)
 8002c28:	fba3 1302 	umull	r1, r3, r3, r2
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	2164      	movs	r1, #100	; 0x64
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	3332      	adds	r3, #50	; 0x32
 8002c3a:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <UART_SetConfig+0x4e4>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c46:	441c      	add	r4, r3
 8002c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	673b      	str	r3, [r7, #112]	; 0x70
 8002c50:	677a      	str	r2, [r7, #116]	; 0x74
 8002c52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c56:	4642      	mov	r2, r8
 8002c58:	464b      	mov	r3, r9
 8002c5a:	1891      	adds	r1, r2, r2
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	415b      	adcs	r3, r3
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c66:	4641      	mov	r1, r8
 8002c68:	1851      	adds	r1, r2, r1
 8002c6a:	6039      	str	r1, [r7, #0]
 8002c6c:	4649      	mov	r1, r9
 8002c6e:	414b      	adcs	r3, r1
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c7e:	4659      	mov	r1, fp
 8002c80:	00cb      	lsls	r3, r1, #3
 8002c82:	4651      	mov	r1, sl
 8002c84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c88:	4651      	mov	r1, sl
 8002c8a:	00ca      	lsls	r2, r1, #3
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4603      	mov	r3, r0
 8002c92:	4642      	mov	r2, r8
 8002c94:	189b      	adds	r3, r3, r2
 8002c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c98:	464b      	mov	r3, r9
 8002c9a:	460a      	mov	r2, r1
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	663b      	str	r3, [r7, #96]	; 0x60
 8002cac:	667a      	str	r2, [r7, #100]	; 0x64
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cba:	4649      	mov	r1, r9
 8002cbc:	008b      	lsls	r3, r1, #2
 8002cbe:	4641      	mov	r1, r8
 8002cc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	008a      	lsls	r2, r1, #2
 8002cc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ccc:	f7fd faf8 	bl	80002c0 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <UART_SetConfig+0x4e4>)
 8002cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2164      	movs	r1, #100	; 0x64
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	3332      	adds	r3, #50	; 0x32
 8002ce8:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <UART_SetConfig+0x4e4>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	f003 020f 	and.w	r2, r3, #15
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4422      	add	r2, r4
 8002cfc:	609a      	str	r2, [r3, #8]
}
 8002cfe:	bf00      	nop
 8002d00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d04:	46bd      	mov	sp, r7
 8002d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0a:	bf00      	nop
 8002d0c:	51eb851f 	.word	0x51eb851f

08002d10 <__errno>:
 8002d10:	4b01      	ldr	r3, [pc, #4]	; (8002d18 <__errno+0x8>)
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	2000000c 	.word	0x2000000c

08002d1c <__libc_init_array>:
 8002d1c:	b570      	push	{r4, r5, r6, lr}
 8002d1e:	4d0d      	ldr	r5, [pc, #52]	; (8002d54 <__libc_init_array+0x38>)
 8002d20:	4c0d      	ldr	r4, [pc, #52]	; (8002d58 <__libc_init_array+0x3c>)
 8002d22:	1b64      	subs	r4, r4, r5
 8002d24:	10a4      	asrs	r4, r4, #2
 8002d26:	2600      	movs	r6, #0
 8002d28:	42a6      	cmp	r6, r4
 8002d2a:	d109      	bne.n	8002d40 <__libc_init_array+0x24>
 8002d2c:	4d0b      	ldr	r5, [pc, #44]	; (8002d5c <__libc_init_array+0x40>)
 8002d2e:	4c0c      	ldr	r4, [pc, #48]	; (8002d60 <__libc_init_array+0x44>)
 8002d30:	f000 fc8e 	bl	8003650 <_init>
 8002d34:	1b64      	subs	r4, r4, r5
 8002d36:	10a4      	asrs	r4, r4, #2
 8002d38:	2600      	movs	r6, #0
 8002d3a:	42a6      	cmp	r6, r4
 8002d3c:	d105      	bne.n	8002d4a <__libc_init_array+0x2e>
 8002d3e:	bd70      	pop	{r4, r5, r6, pc}
 8002d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d44:	4798      	blx	r3
 8002d46:	3601      	adds	r6, #1
 8002d48:	e7ee      	b.n	8002d28 <__libc_init_array+0xc>
 8002d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d4e:	4798      	blx	r3
 8002d50:	3601      	adds	r6, #1
 8002d52:	e7f2      	b.n	8002d3a <__libc_init_array+0x1e>
 8002d54:	080036fc 	.word	0x080036fc
 8002d58:	080036fc 	.word	0x080036fc
 8002d5c:	080036fc 	.word	0x080036fc
 8002d60:	08003700 	.word	0x08003700

08002d64 <memset>:
 8002d64:	4402      	add	r2, r0
 8002d66:	4603      	mov	r3, r0
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d100      	bne.n	8002d6e <memset+0xa>
 8002d6c:	4770      	bx	lr
 8002d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d72:	e7f9      	b.n	8002d68 <memset+0x4>

08002d74 <siprintf>:
 8002d74:	b40e      	push	{r1, r2, r3}
 8002d76:	b500      	push	{lr}
 8002d78:	b09c      	sub	sp, #112	; 0x70
 8002d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8002d7c:	9002      	str	r0, [sp, #8]
 8002d7e:	9006      	str	r0, [sp, #24]
 8002d80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d84:	4809      	ldr	r0, [pc, #36]	; (8002dac <siprintf+0x38>)
 8002d86:	9107      	str	r1, [sp, #28]
 8002d88:	9104      	str	r1, [sp, #16]
 8002d8a:	4909      	ldr	r1, [pc, #36]	; (8002db0 <siprintf+0x3c>)
 8002d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d90:	9105      	str	r1, [sp, #20]
 8002d92:	6800      	ldr	r0, [r0, #0]
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	a902      	add	r1, sp, #8
 8002d98:	f000 f868 	bl	8002e6c <_svfiprintf_r>
 8002d9c:	9b02      	ldr	r3, [sp, #8]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	b01c      	add	sp, #112	; 0x70
 8002da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002da8:	b003      	add	sp, #12
 8002daa:	4770      	bx	lr
 8002dac:	2000000c 	.word	0x2000000c
 8002db0:	ffff0208 	.word	0xffff0208

08002db4 <__ssputs_r>:
 8002db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db8:	688e      	ldr	r6, [r1, #8]
 8002dba:	429e      	cmp	r6, r3
 8002dbc:	4682      	mov	sl, r0
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	4690      	mov	r8, r2
 8002dc2:	461f      	mov	r7, r3
 8002dc4:	d838      	bhi.n	8002e38 <__ssputs_r+0x84>
 8002dc6:	898a      	ldrh	r2, [r1, #12]
 8002dc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002dcc:	d032      	beq.n	8002e34 <__ssputs_r+0x80>
 8002dce:	6825      	ldr	r5, [r4, #0]
 8002dd0:	6909      	ldr	r1, [r1, #16]
 8002dd2:	eba5 0901 	sub.w	r9, r5, r1
 8002dd6:	6965      	ldr	r5, [r4, #20]
 8002dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ddc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002de0:	3301      	adds	r3, #1
 8002de2:	444b      	add	r3, r9
 8002de4:	106d      	asrs	r5, r5, #1
 8002de6:	429d      	cmp	r5, r3
 8002de8:	bf38      	it	cc
 8002dea:	461d      	movcc	r5, r3
 8002dec:	0553      	lsls	r3, r2, #21
 8002dee:	d531      	bpl.n	8002e54 <__ssputs_r+0xa0>
 8002df0:	4629      	mov	r1, r5
 8002df2:	f000 fb63 	bl	80034bc <_malloc_r>
 8002df6:	4606      	mov	r6, r0
 8002df8:	b950      	cbnz	r0, 8002e10 <__ssputs_r+0x5c>
 8002dfa:	230c      	movs	r3, #12
 8002dfc:	f8ca 3000 	str.w	r3, [sl]
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e06:	81a3      	strh	r3, [r4, #12]
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e10:	6921      	ldr	r1, [r4, #16]
 8002e12:	464a      	mov	r2, r9
 8002e14:	f000 fabe 	bl	8003394 <memcpy>
 8002e18:	89a3      	ldrh	r3, [r4, #12]
 8002e1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e22:	81a3      	strh	r3, [r4, #12]
 8002e24:	6126      	str	r6, [r4, #16]
 8002e26:	6165      	str	r5, [r4, #20]
 8002e28:	444e      	add	r6, r9
 8002e2a:	eba5 0509 	sub.w	r5, r5, r9
 8002e2e:	6026      	str	r6, [r4, #0]
 8002e30:	60a5      	str	r5, [r4, #8]
 8002e32:	463e      	mov	r6, r7
 8002e34:	42be      	cmp	r6, r7
 8002e36:	d900      	bls.n	8002e3a <__ssputs_r+0x86>
 8002e38:	463e      	mov	r6, r7
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	4632      	mov	r2, r6
 8002e3e:	4641      	mov	r1, r8
 8002e40:	f000 fab6 	bl	80033b0 <memmove>
 8002e44:	68a3      	ldr	r3, [r4, #8]
 8002e46:	1b9b      	subs	r3, r3, r6
 8002e48:	60a3      	str	r3, [r4, #8]
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	4433      	add	r3, r6
 8002e4e:	6023      	str	r3, [r4, #0]
 8002e50:	2000      	movs	r0, #0
 8002e52:	e7db      	b.n	8002e0c <__ssputs_r+0x58>
 8002e54:	462a      	mov	r2, r5
 8002e56:	f000 fba5 	bl	80035a4 <_realloc_r>
 8002e5a:	4606      	mov	r6, r0
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d1e1      	bne.n	8002e24 <__ssputs_r+0x70>
 8002e60:	6921      	ldr	r1, [r4, #16]
 8002e62:	4650      	mov	r0, sl
 8002e64:	f000 fabe 	bl	80033e4 <_free_r>
 8002e68:	e7c7      	b.n	8002dfa <__ssputs_r+0x46>
	...

08002e6c <_svfiprintf_r>:
 8002e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e70:	4698      	mov	r8, r3
 8002e72:	898b      	ldrh	r3, [r1, #12]
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	b09d      	sub	sp, #116	; 0x74
 8002e78:	4607      	mov	r7, r0
 8002e7a:	460d      	mov	r5, r1
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	d50e      	bpl.n	8002e9e <_svfiprintf_r+0x32>
 8002e80:	690b      	ldr	r3, [r1, #16]
 8002e82:	b963      	cbnz	r3, 8002e9e <_svfiprintf_r+0x32>
 8002e84:	2140      	movs	r1, #64	; 0x40
 8002e86:	f000 fb19 	bl	80034bc <_malloc_r>
 8002e8a:	6028      	str	r0, [r5, #0]
 8002e8c:	6128      	str	r0, [r5, #16]
 8002e8e:	b920      	cbnz	r0, 8002e9a <_svfiprintf_r+0x2e>
 8002e90:	230c      	movs	r3, #12
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	e0d1      	b.n	800303e <_svfiprintf_r+0x1d2>
 8002e9a:	2340      	movs	r3, #64	; 0x40
 8002e9c:	616b      	str	r3, [r5, #20]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ea8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002eac:	2330      	movs	r3, #48	; 0x30
 8002eae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003058 <_svfiprintf_r+0x1ec>
 8002eb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002eb6:	f04f 0901 	mov.w	r9, #1
 8002eba:	4623      	mov	r3, r4
 8002ebc:	469a      	mov	sl, r3
 8002ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ec2:	b10a      	cbz	r2, 8002ec8 <_svfiprintf_r+0x5c>
 8002ec4:	2a25      	cmp	r2, #37	; 0x25
 8002ec6:	d1f9      	bne.n	8002ebc <_svfiprintf_r+0x50>
 8002ec8:	ebba 0b04 	subs.w	fp, sl, r4
 8002ecc:	d00b      	beq.n	8002ee6 <_svfiprintf_r+0x7a>
 8002ece:	465b      	mov	r3, fp
 8002ed0:	4622      	mov	r2, r4
 8002ed2:	4629      	mov	r1, r5
 8002ed4:	4638      	mov	r0, r7
 8002ed6:	f7ff ff6d 	bl	8002db4 <__ssputs_r>
 8002eda:	3001      	adds	r0, #1
 8002edc:	f000 80aa 	beq.w	8003034 <_svfiprintf_r+0x1c8>
 8002ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ee2:	445a      	add	r2, fp
 8002ee4:	9209      	str	r2, [sp, #36]	; 0x24
 8002ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80a2 	beq.w	8003034 <_svfiprintf_r+0x1c8>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002efa:	f10a 0a01 	add.w	sl, sl, #1
 8002efe:	9304      	str	r3, [sp, #16]
 8002f00:	9307      	str	r3, [sp, #28]
 8002f02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f06:	931a      	str	r3, [sp, #104]	; 0x68
 8002f08:	4654      	mov	r4, sl
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f10:	4851      	ldr	r0, [pc, #324]	; (8003058 <_svfiprintf_r+0x1ec>)
 8002f12:	f7fd f985 	bl	8000220 <memchr>
 8002f16:	9a04      	ldr	r2, [sp, #16]
 8002f18:	b9d8      	cbnz	r0, 8002f52 <_svfiprintf_r+0xe6>
 8002f1a:	06d0      	lsls	r0, r2, #27
 8002f1c:	bf44      	itt	mi
 8002f1e:	2320      	movmi	r3, #32
 8002f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f24:	0711      	lsls	r1, r2, #28
 8002f26:	bf44      	itt	mi
 8002f28:	232b      	movmi	r3, #43	; 0x2b
 8002f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f32:	2b2a      	cmp	r3, #42	; 0x2a
 8002f34:	d015      	beq.n	8002f62 <_svfiprintf_r+0xf6>
 8002f36:	9a07      	ldr	r2, [sp, #28]
 8002f38:	4654      	mov	r4, sl
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f04f 0c0a 	mov.w	ip, #10
 8002f40:	4621      	mov	r1, r4
 8002f42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f46:	3b30      	subs	r3, #48	; 0x30
 8002f48:	2b09      	cmp	r3, #9
 8002f4a:	d94e      	bls.n	8002fea <_svfiprintf_r+0x17e>
 8002f4c:	b1b0      	cbz	r0, 8002f7c <_svfiprintf_r+0x110>
 8002f4e:	9207      	str	r2, [sp, #28]
 8002f50:	e014      	b.n	8002f7c <_svfiprintf_r+0x110>
 8002f52:	eba0 0308 	sub.w	r3, r0, r8
 8002f56:	fa09 f303 	lsl.w	r3, r9, r3
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	9304      	str	r3, [sp, #16]
 8002f5e:	46a2      	mov	sl, r4
 8002f60:	e7d2      	b.n	8002f08 <_svfiprintf_r+0x9c>
 8002f62:	9b03      	ldr	r3, [sp, #12]
 8002f64:	1d19      	adds	r1, r3, #4
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	9103      	str	r1, [sp, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bfbb      	ittet	lt
 8002f6e:	425b      	neglt	r3, r3
 8002f70:	f042 0202 	orrlt.w	r2, r2, #2
 8002f74:	9307      	strge	r3, [sp, #28]
 8002f76:	9307      	strlt	r3, [sp, #28]
 8002f78:	bfb8      	it	lt
 8002f7a:	9204      	strlt	r2, [sp, #16]
 8002f7c:	7823      	ldrb	r3, [r4, #0]
 8002f7e:	2b2e      	cmp	r3, #46	; 0x2e
 8002f80:	d10c      	bne.n	8002f9c <_svfiprintf_r+0x130>
 8002f82:	7863      	ldrb	r3, [r4, #1]
 8002f84:	2b2a      	cmp	r3, #42	; 0x2a
 8002f86:	d135      	bne.n	8002ff4 <_svfiprintf_r+0x188>
 8002f88:	9b03      	ldr	r3, [sp, #12]
 8002f8a:	1d1a      	adds	r2, r3, #4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	9203      	str	r2, [sp, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bfb8      	it	lt
 8002f94:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f98:	3402      	adds	r4, #2
 8002f9a:	9305      	str	r3, [sp, #20]
 8002f9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003068 <_svfiprintf_r+0x1fc>
 8002fa0:	7821      	ldrb	r1, [r4, #0]
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	4650      	mov	r0, sl
 8002fa6:	f7fd f93b 	bl	8000220 <memchr>
 8002faa:	b140      	cbz	r0, 8002fbe <_svfiprintf_r+0x152>
 8002fac:	2340      	movs	r3, #64	; 0x40
 8002fae:	eba0 000a 	sub.w	r0, r0, sl
 8002fb2:	fa03 f000 	lsl.w	r0, r3, r0
 8002fb6:	9b04      	ldr	r3, [sp, #16]
 8002fb8:	4303      	orrs	r3, r0
 8002fba:	3401      	adds	r4, #1
 8002fbc:	9304      	str	r3, [sp, #16]
 8002fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fc2:	4826      	ldr	r0, [pc, #152]	; (800305c <_svfiprintf_r+0x1f0>)
 8002fc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fc8:	2206      	movs	r2, #6
 8002fca:	f7fd f929 	bl	8000220 <memchr>
 8002fce:	2800      	cmp	r0, #0
 8002fd0:	d038      	beq.n	8003044 <_svfiprintf_r+0x1d8>
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <_svfiprintf_r+0x1f4>)
 8002fd4:	bb1b      	cbnz	r3, 800301e <_svfiprintf_r+0x1b2>
 8002fd6:	9b03      	ldr	r3, [sp, #12]
 8002fd8:	3307      	adds	r3, #7
 8002fda:	f023 0307 	bic.w	r3, r3, #7
 8002fde:	3308      	adds	r3, #8
 8002fe0:	9303      	str	r3, [sp, #12]
 8002fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fe4:	4433      	add	r3, r6
 8002fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8002fe8:	e767      	b.n	8002eba <_svfiprintf_r+0x4e>
 8002fea:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fee:	460c      	mov	r4, r1
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	e7a5      	b.n	8002f40 <_svfiprintf_r+0xd4>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	3401      	adds	r4, #1
 8002ff8:	9305      	str	r3, [sp, #20]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	f04f 0c0a 	mov.w	ip, #10
 8003000:	4620      	mov	r0, r4
 8003002:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003006:	3a30      	subs	r2, #48	; 0x30
 8003008:	2a09      	cmp	r2, #9
 800300a:	d903      	bls.n	8003014 <_svfiprintf_r+0x1a8>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0c5      	beq.n	8002f9c <_svfiprintf_r+0x130>
 8003010:	9105      	str	r1, [sp, #20]
 8003012:	e7c3      	b.n	8002f9c <_svfiprintf_r+0x130>
 8003014:	fb0c 2101 	mla	r1, ip, r1, r2
 8003018:	4604      	mov	r4, r0
 800301a:	2301      	movs	r3, #1
 800301c:	e7f0      	b.n	8003000 <_svfiprintf_r+0x194>
 800301e:	ab03      	add	r3, sp, #12
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	462a      	mov	r2, r5
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <_svfiprintf_r+0x1f8>)
 8003026:	a904      	add	r1, sp, #16
 8003028:	4638      	mov	r0, r7
 800302a:	f3af 8000 	nop.w
 800302e:	1c42      	adds	r2, r0, #1
 8003030:	4606      	mov	r6, r0
 8003032:	d1d6      	bne.n	8002fe2 <_svfiprintf_r+0x176>
 8003034:	89ab      	ldrh	r3, [r5, #12]
 8003036:	065b      	lsls	r3, r3, #25
 8003038:	f53f af2c 	bmi.w	8002e94 <_svfiprintf_r+0x28>
 800303c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800303e:	b01d      	add	sp, #116	; 0x74
 8003040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003044:	ab03      	add	r3, sp, #12
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	462a      	mov	r2, r5
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <_svfiprintf_r+0x1f8>)
 800304c:	a904      	add	r1, sp, #16
 800304e:	4638      	mov	r0, r7
 8003050:	f000 f87a 	bl	8003148 <_printf_i>
 8003054:	e7eb      	b.n	800302e <_svfiprintf_r+0x1c2>
 8003056:	bf00      	nop
 8003058:	080036c0 	.word	0x080036c0
 800305c:	080036ca 	.word	0x080036ca
 8003060:	00000000 	.word	0x00000000
 8003064:	08002db5 	.word	0x08002db5
 8003068:	080036c6 	.word	0x080036c6

0800306c <_printf_common>:
 800306c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003070:	4616      	mov	r6, r2
 8003072:	4699      	mov	r9, r3
 8003074:	688a      	ldr	r2, [r1, #8]
 8003076:	690b      	ldr	r3, [r1, #16]
 8003078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800307c:	4293      	cmp	r3, r2
 800307e:	bfb8      	it	lt
 8003080:	4613      	movlt	r3, r2
 8003082:	6033      	str	r3, [r6, #0]
 8003084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003088:	4607      	mov	r7, r0
 800308a:	460c      	mov	r4, r1
 800308c:	b10a      	cbz	r2, 8003092 <_printf_common+0x26>
 800308e:	3301      	adds	r3, #1
 8003090:	6033      	str	r3, [r6, #0]
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	0699      	lsls	r1, r3, #26
 8003096:	bf42      	ittt	mi
 8003098:	6833      	ldrmi	r3, [r6, #0]
 800309a:	3302      	addmi	r3, #2
 800309c:	6033      	strmi	r3, [r6, #0]
 800309e:	6825      	ldr	r5, [r4, #0]
 80030a0:	f015 0506 	ands.w	r5, r5, #6
 80030a4:	d106      	bne.n	80030b4 <_printf_common+0x48>
 80030a6:	f104 0a19 	add.w	sl, r4, #25
 80030aa:	68e3      	ldr	r3, [r4, #12]
 80030ac:	6832      	ldr	r2, [r6, #0]
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	42ab      	cmp	r3, r5
 80030b2:	dc26      	bgt.n	8003102 <_printf_common+0x96>
 80030b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030b8:	1e13      	subs	r3, r2, #0
 80030ba:	6822      	ldr	r2, [r4, #0]
 80030bc:	bf18      	it	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	0692      	lsls	r2, r2, #26
 80030c2:	d42b      	bmi.n	800311c <_printf_common+0xb0>
 80030c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030c8:	4649      	mov	r1, r9
 80030ca:	4638      	mov	r0, r7
 80030cc:	47c0      	blx	r8
 80030ce:	3001      	adds	r0, #1
 80030d0:	d01e      	beq.n	8003110 <_printf_common+0xa4>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	68e5      	ldr	r5, [r4, #12]
 80030d6:	6832      	ldr	r2, [r6, #0]
 80030d8:	f003 0306 	and.w	r3, r3, #6
 80030dc:	2b04      	cmp	r3, #4
 80030de:	bf08      	it	eq
 80030e0:	1aad      	subeq	r5, r5, r2
 80030e2:	68a3      	ldr	r3, [r4, #8]
 80030e4:	6922      	ldr	r2, [r4, #16]
 80030e6:	bf0c      	ite	eq
 80030e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030ec:	2500      	movne	r5, #0
 80030ee:	4293      	cmp	r3, r2
 80030f0:	bfc4      	itt	gt
 80030f2:	1a9b      	subgt	r3, r3, r2
 80030f4:	18ed      	addgt	r5, r5, r3
 80030f6:	2600      	movs	r6, #0
 80030f8:	341a      	adds	r4, #26
 80030fa:	42b5      	cmp	r5, r6
 80030fc:	d11a      	bne.n	8003134 <_printf_common+0xc8>
 80030fe:	2000      	movs	r0, #0
 8003100:	e008      	b.n	8003114 <_printf_common+0xa8>
 8003102:	2301      	movs	r3, #1
 8003104:	4652      	mov	r2, sl
 8003106:	4649      	mov	r1, r9
 8003108:	4638      	mov	r0, r7
 800310a:	47c0      	blx	r8
 800310c:	3001      	adds	r0, #1
 800310e:	d103      	bne.n	8003118 <_printf_common+0xac>
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003118:	3501      	adds	r5, #1
 800311a:	e7c6      	b.n	80030aa <_printf_common+0x3e>
 800311c:	18e1      	adds	r1, r4, r3
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	2030      	movs	r0, #48	; 0x30
 8003122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003126:	4422      	add	r2, r4
 8003128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800312c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003130:	3302      	adds	r3, #2
 8003132:	e7c7      	b.n	80030c4 <_printf_common+0x58>
 8003134:	2301      	movs	r3, #1
 8003136:	4622      	mov	r2, r4
 8003138:	4649      	mov	r1, r9
 800313a:	4638      	mov	r0, r7
 800313c:	47c0      	blx	r8
 800313e:	3001      	adds	r0, #1
 8003140:	d0e6      	beq.n	8003110 <_printf_common+0xa4>
 8003142:	3601      	adds	r6, #1
 8003144:	e7d9      	b.n	80030fa <_printf_common+0x8e>
	...

08003148 <_printf_i>:
 8003148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800314c:	7e0f      	ldrb	r7, [r1, #24]
 800314e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003150:	2f78      	cmp	r7, #120	; 0x78
 8003152:	4691      	mov	r9, r2
 8003154:	4680      	mov	r8, r0
 8003156:	460c      	mov	r4, r1
 8003158:	469a      	mov	sl, r3
 800315a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800315e:	d807      	bhi.n	8003170 <_printf_i+0x28>
 8003160:	2f62      	cmp	r7, #98	; 0x62
 8003162:	d80a      	bhi.n	800317a <_printf_i+0x32>
 8003164:	2f00      	cmp	r7, #0
 8003166:	f000 80d8 	beq.w	800331a <_printf_i+0x1d2>
 800316a:	2f58      	cmp	r7, #88	; 0x58
 800316c:	f000 80a3 	beq.w	80032b6 <_printf_i+0x16e>
 8003170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003178:	e03a      	b.n	80031f0 <_printf_i+0xa8>
 800317a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800317e:	2b15      	cmp	r3, #21
 8003180:	d8f6      	bhi.n	8003170 <_printf_i+0x28>
 8003182:	a101      	add	r1, pc, #4	; (adr r1, 8003188 <_printf_i+0x40>)
 8003184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003188:	080031e1 	.word	0x080031e1
 800318c:	080031f5 	.word	0x080031f5
 8003190:	08003171 	.word	0x08003171
 8003194:	08003171 	.word	0x08003171
 8003198:	08003171 	.word	0x08003171
 800319c:	08003171 	.word	0x08003171
 80031a0:	080031f5 	.word	0x080031f5
 80031a4:	08003171 	.word	0x08003171
 80031a8:	08003171 	.word	0x08003171
 80031ac:	08003171 	.word	0x08003171
 80031b0:	08003171 	.word	0x08003171
 80031b4:	08003301 	.word	0x08003301
 80031b8:	08003225 	.word	0x08003225
 80031bc:	080032e3 	.word	0x080032e3
 80031c0:	08003171 	.word	0x08003171
 80031c4:	08003171 	.word	0x08003171
 80031c8:	08003323 	.word	0x08003323
 80031cc:	08003171 	.word	0x08003171
 80031d0:	08003225 	.word	0x08003225
 80031d4:	08003171 	.word	0x08003171
 80031d8:	08003171 	.word	0x08003171
 80031dc:	080032eb 	.word	0x080032eb
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	602a      	str	r2, [r5, #0]
 80031e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0a3      	b.n	800333c <_printf_i+0x1f4>
 80031f4:	6820      	ldr	r0, [r4, #0]
 80031f6:	6829      	ldr	r1, [r5, #0]
 80031f8:	0606      	lsls	r6, r0, #24
 80031fa:	f101 0304 	add.w	r3, r1, #4
 80031fe:	d50a      	bpl.n	8003216 <_printf_i+0xce>
 8003200:	680e      	ldr	r6, [r1, #0]
 8003202:	602b      	str	r3, [r5, #0]
 8003204:	2e00      	cmp	r6, #0
 8003206:	da03      	bge.n	8003210 <_printf_i+0xc8>
 8003208:	232d      	movs	r3, #45	; 0x2d
 800320a:	4276      	negs	r6, r6
 800320c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003210:	485e      	ldr	r0, [pc, #376]	; (800338c <_printf_i+0x244>)
 8003212:	230a      	movs	r3, #10
 8003214:	e019      	b.n	800324a <_printf_i+0x102>
 8003216:	680e      	ldr	r6, [r1, #0]
 8003218:	602b      	str	r3, [r5, #0]
 800321a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800321e:	bf18      	it	ne
 8003220:	b236      	sxthne	r6, r6
 8003222:	e7ef      	b.n	8003204 <_printf_i+0xbc>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	6820      	ldr	r0, [r4, #0]
 8003228:	1d19      	adds	r1, r3, #4
 800322a:	6029      	str	r1, [r5, #0]
 800322c:	0601      	lsls	r1, r0, #24
 800322e:	d501      	bpl.n	8003234 <_printf_i+0xec>
 8003230:	681e      	ldr	r6, [r3, #0]
 8003232:	e002      	b.n	800323a <_printf_i+0xf2>
 8003234:	0646      	lsls	r6, r0, #25
 8003236:	d5fb      	bpl.n	8003230 <_printf_i+0xe8>
 8003238:	881e      	ldrh	r6, [r3, #0]
 800323a:	4854      	ldr	r0, [pc, #336]	; (800338c <_printf_i+0x244>)
 800323c:	2f6f      	cmp	r7, #111	; 0x6f
 800323e:	bf0c      	ite	eq
 8003240:	2308      	moveq	r3, #8
 8003242:	230a      	movne	r3, #10
 8003244:	2100      	movs	r1, #0
 8003246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800324a:	6865      	ldr	r5, [r4, #4]
 800324c:	60a5      	str	r5, [r4, #8]
 800324e:	2d00      	cmp	r5, #0
 8003250:	bfa2      	ittt	ge
 8003252:	6821      	ldrge	r1, [r4, #0]
 8003254:	f021 0104 	bicge.w	r1, r1, #4
 8003258:	6021      	strge	r1, [r4, #0]
 800325a:	b90e      	cbnz	r6, 8003260 <_printf_i+0x118>
 800325c:	2d00      	cmp	r5, #0
 800325e:	d04d      	beq.n	80032fc <_printf_i+0x1b4>
 8003260:	4615      	mov	r5, r2
 8003262:	fbb6 f1f3 	udiv	r1, r6, r3
 8003266:	fb03 6711 	mls	r7, r3, r1, r6
 800326a:	5dc7      	ldrb	r7, [r0, r7]
 800326c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003270:	4637      	mov	r7, r6
 8003272:	42bb      	cmp	r3, r7
 8003274:	460e      	mov	r6, r1
 8003276:	d9f4      	bls.n	8003262 <_printf_i+0x11a>
 8003278:	2b08      	cmp	r3, #8
 800327a:	d10b      	bne.n	8003294 <_printf_i+0x14c>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	07de      	lsls	r6, r3, #31
 8003280:	d508      	bpl.n	8003294 <_printf_i+0x14c>
 8003282:	6923      	ldr	r3, [r4, #16]
 8003284:	6861      	ldr	r1, [r4, #4]
 8003286:	4299      	cmp	r1, r3
 8003288:	bfde      	ittt	le
 800328a:	2330      	movle	r3, #48	; 0x30
 800328c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003290:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003294:	1b52      	subs	r2, r2, r5
 8003296:	6122      	str	r2, [r4, #16]
 8003298:	f8cd a000 	str.w	sl, [sp]
 800329c:	464b      	mov	r3, r9
 800329e:	aa03      	add	r2, sp, #12
 80032a0:	4621      	mov	r1, r4
 80032a2:	4640      	mov	r0, r8
 80032a4:	f7ff fee2 	bl	800306c <_printf_common>
 80032a8:	3001      	adds	r0, #1
 80032aa:	d14c      	bne.n	8003346 <_printf_i+0x1fe>
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	b004      	add	sp, #16
 80032b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b6:	4835      	ldr	r0, [pc, #212]	; (800338c <_printf_i+0x244>)
 80032b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80032bc:	6829      	ldr	r1, [r5, #0]
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80032c4:	6029      	str	r1, [r5, #0]
 80032c6:	061d      	lsls	r5, r3, #24
 80032c8:	d514      	bpl.n	80032f4 <_printf_i+0x1ac>
 80032ca:	07df      	lsls	r7, r3, #31
 80032cc:	bf44      	itt	mi
 80032ce:	f043 0320 	orrmi.w	r3, r3, #32
 80032d2:	6023      	strmi	r3, [r4, #0]
 80032d4:	b91e      	cbnz	r6, 80032de <_printf_i+0x196>
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	f023 0320 	bic.w	r3, r3, #32
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	2310      	movs	r3, #16
 80032e0:	e7b0      	b.n	8003244 <_printf_i+0xfc>
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	f043 0320 	orr.w	r3, r3, #32
 80032e8:	6023      	str	r3, [r4, #0]
 80032ea:	2378      	movs	r3, #120	; 0x78
 80032ec:	4828      	ldr	r0, [pc, #160]	; (8003390 <_printf_i+0x248>)
 80032ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032f2:	e7e3      	b.n	80032bc <_printf_i+0x174>
 80032f4:	0659      	lsls	r1, r3, #25
 80032f6:	bf48      	it	mi
 80032f8:	b2b6      	uxthmi	r6, r6
 80032fa:	e7e6      	b.n	80032ca <_printf_i+0x182>
 80032fc:	4615      	mov	r5, r2
 80032fe:	e7bb      	b.n	8003278 <_printf_i+0x130>
 8003300:	682b      	ldr	r3, [r5, #0]
 8003302:	6826      	ldr	r6, [r4, #0]
 8003304:	6961      	ldr	r1, [r4, #20]
 8003306:	1d18      	adds	r0, r3, #4
 8003308:	6028      	str	r0, [r5, #0]
 800330a:	0635      	lsls	r5, r6, #24
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	d501      	bpl.n	8003314 <_printf_i+0x1cc>
 8003310:	6019      	str	r1, [r3, #0]
 8003312:	e002      	b.n	800331a <_printf_i+0x1d2>
 8003314:	0670      	lsls	r0, r6, #25
 8003316:	d5fb      	bpl.n	8003310 <_printf_i+0x1c8>
 8003318:	8019      	strh	r1, [r3, #0]
 800331a:	2300      	movs	r3, #0
 800331c:	6123      	str	r3, [r4, #16]
 800331e:	4615      	mov	r5, r2
 8003320:	e7ba      	b.n	8003298 <_printf_i+0x150>
 8003322:	682b      	ldr	r3, [r5, #0]
 8003324:	1d1a      	adds	r2, r3, #4
 8003326:	602a      	str	r2, [r5, #0]
 8003328:	681d      	ldr	r5, [r3, #0]
 800332a:	6862      	ldr	r2, [r4, #4]
 800332c:	2100      	movs	r1, #0
 800332e:	4628      	mov	r0, r5
 8003330:	f7fc ff76 	bl	8000220 <memchr>
 8003334:	b108      	cbz	r0, 800333a <_printf_i+0x1f2>
 8003336:	1b40      	subs	r0, r0, r5
 8003338:	6060      	str	r0, [r4, #4]
 800333a:	6863      	ldr	r3, [r4, #4]
 800333c:	6123      	str	r3, [r4, #16]
 800333e:	2300      	movs	r3, #0
 8003340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003344:	e7a8      	b.n	8003298 <_printf_i+0x150>
 8003346:	6923      	ldr	r3, [r4, #16]
 8003348:	462a      	mov	r2, r5
 800334a:	4649      	mov	r1, r9
 800334c:	4640      	mov	r0, r8
 800334e:	47d0      	blx	sl
 8003350:	3001      	adds	r0, #1
 8003352:	d0ab      	beq.n	80032ac <_printf_i+0x164>
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	079b      	lsls	r3, r3, #30
 8003358:	d413      	bmi.n	8003382 <_printf_i+0x23a>
 800335a:	68e0      	ldr	r0, [r4, #12]
 800335c:	9b03      	ldr	r3, [sp, #12]
 800335e:	4298      	cmp	r0, r3
 8003360:	bfb8      	it	lt
 8003362:	4618      	movlt	r0, r3
 8003364:	e7a4      	b.n	80032b0 <_printf_i+0x168>
 8003366:	2301      	movs	r3, #1
 8003368:	4632      	mov	r2, r6
 800336a:	4649      	mov	r1, r9
 800336c:	4640      	mov	r0, r8
 800336e:	47d0      	blx	sl
 8003370:	3001      	adds	r0, #1
 8003372:	d09b      	beq.n	80032ac <_printf_i+0x164>
 8003374:	3501      	adds	r5, #1
 8003376:	68e3      	ldr	r3, [r4, #12]
 8003378:	9903      	ldr	r1, [sp, #12]
 800337a:	1a5b      	subs	r3, r3, r1
 800337c:	42ab      	cmp	r3, r5
 800337e:	dcf2      	bgt.n	8003366 <_printf_i+0x21e>
 8003380:	e7eb      	b.n	800335a <_printf_i+0x212>
 8003382:	2500      	movs	r5, #0
 8003384:	f104 0619 	add.w	r6, r4, #25
 8003388:	e7f5      	b.n	8003376 <_printf_i+0x22e>
 800338a:	bf00      	nop
 800338c:	080036d1 	.word	0x080036d1
 8003390:	080036e2 	.word	0x080036e2

08003394 <memcpy>:
 8003394:	440a      	add	r2, r1
 8003396:	4291      	cmp	r1, r2
 8003398:	f100 33ff 	add.w	r3, r0, #4294967295
 800339c:	d100      	bne.n	80033a0 <memcpy+0xc>
 800339e:	4770      	bx	lr
 80033a0:	b510      	push	{r4, lr}
 80033a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033aa:	4291      	cmp	r1, r2
 80033ac:	d1f9      	bne.n	80033a2 <memcpy+0xe>
 80033ae:	bd10      	pop	{r4, pc}

080033b0 <memmove>:
 80033b0:	4288      	cmp	r0, r1
 80033b2:	b510      	push	{r4, lr}
 80033b4:	eb01 0402 	add.w	r4, r1, r2
 80033b8:	d902      	bls.n	80033c0 <memmove+0x10>
 80033ba:	4284      	cmp	r4, r0
 80033bc:	4623      	mov	r3, r4
 80033be:	d807      	bhi.n	80033d0 <memmove+0x20>
 80033c0:	1e43      	subs	r3, r0, #1
 80033c2:	42a1      	cmp	r1, r4
 80033c4:	d008      	beq.n	80033d8 <memmove+0x28>
 80033c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033ce:	e7f8      	b.n	80033c2 <memmove+0x12>
 80033d0:	4402      	add	r2, r0
 80033d2:	4601      	mov	r1, r0
 80033d4:	428a      	cmp	r2, r1
 80033d6:	d100      	bne.n	80033da <memmove+0x2a>
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033e2:	e7f7      	b.n	80033d4 <memmove+0x24>

080033e4 <_free_r>:
 80033e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033e6:	2900      	cmp	r1, #0
 80033e8:	d044      	beq.n	8003474 <_free_r+0x90>
 80033ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033ee:	9001      	str	r0, [sp, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f1a1 0404 	sub.w	r4, r1, #4
 80033f6:	bfb8      	it	lt
 80033f8:	18e4      	addlt	r4, r4, r3
 80033fa:	f000 f913 	bl	8003624 <__malloc_lock>
 80033fe:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <_free_r+0x94>)
 8003400:	9801      	ldr	r0, [sp, #4]
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	b933      	cbnz	r3, 8003414 <_free_r+0x30>
 8003406:	6063      	str	r3, [r4, #4]
 8003408:	6014      	str	r4, [r2, #0]
 800340a:	b003      	add	sp, #12
 800340c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003410:	f000 b90e 	b.w	8003630 <__malloc_unlock>
 8003414:	42a3      	cmp	r3, r4
 8003416:	d908      	bls.n	800342a <_free_r+0x46>
 8003418:	6825      	ldr	r5, [r4, #0]
 800341a:	1961      	adds	r1, r4, r5
 800341c:	428b      	cmp	r3, r1
 800341e:	bf01      	itttt	eq
 8003420:	6819      	ldreq	r1, [r3, #0]
 8003422:	685b      	ldreq	r3, [r3, #4]
 8003424:	1949      	addeq	r1, r1, r5
 8003426:	6021      	streq	r1, [r4, #0]
 8003428:	e7ed      	b.n	8003406 <_free_r+0x22>
 800342a:	461a      	mov	r2, r3
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	b10b      	cbz	r3, 8003434 <_free_r+0x50>
 8003430:	42a3      	cmp	r3, r4
 8003432:	d9fa      	bls.n	800342a <_free_r+0x46>
 8003434:	6811      	ldr	r1, [r2, #0]
 8003436:	1855      	adds	r5, r2, r1
 8003438:	42a5      	cmp	r5, r4
 800343a:	d10b      	bne.n	8003454 <_free_r+0x70>
 800343c:	6824      	ldr	r4, [r4, #0]
 800343e:	4421      	add	r1, r4
 8003440:	1854      	adds	r4, r2, r1
 8003442:	42a3      	cmp	r3, r4
 8003444:	6011      	str	r1, [r2, #0]
 8003446:	d1e0      	bne.n	800340a <_free_r+0x26>
 8003448:	681c      	ldr	r4, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	6053      	str	r3, [r2, #4]
 800344e:	4421      	add	r1, r4
 8003450:	6011      	str	r1, [r2, #0]
 8003452:	e7da      	b.n	800340a <_free_r+0x26>
 8003454:	d902      	bls.n	800345c <_free_r+0x78>
 8003456:	230c      	movs	r3, #12
 8003458:	6003      	str	r3, [r0, #0]
 800345a:	e7d6      	b.n	800340a <_free_r+0x26>
 800345c:	6825      	ldr	r5, [r4, #0]
 800345e:	1961      	adds	r1, r4, r5
 8003460:	428b      	cmp	r3, r1
 8003462:	bf04      	itt	eq
 8003464:	6819      	ldreq	r1, [r3, #0]
 8003466:	685b      	ldreq	r3, [r3, #4]
 8003468:	6063      	str	r3, [r4, #4]
 800346a:	bf04      	itt	eq
 800346c:	1949      	addeq	r1, r1, r5
 800346e:	6021      	streq	r1, [r4, #0]
 8003470:	6054      	str	r4, [r2, #4]
 8003472:	e7ca      	b.n	800340a <_free_r+0x26>
 8003474:	b003      	add	sp, #12
 8003476:	bd30      	pop	{r4, r5, pc}
 8003478:	200000d8 	.word	0x200000d8

0800347c <sbrk_aligned>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	4e0e      	ldr	r6, [pc, #56]	; (80034b8 <sbrk_aligned+0x3c>)
 8003480:	460c      	mov	r4, r1
 8003482:	6831      	ldr	r1, [r6, #0]
 8003484:	4605      	mov	r5, r0
 8003486:	b911      	cbnz	r1, 800348e <sbrk_aligned+0x12>
 8003488:	f000 f8bc 	bl	8003604 <_sbrk_r>
 800348c:	6030      	str	r0, [r6, #0]
 800348e:	4621      	mov	r1, r4
 8003490:	4628      	mov	r0, r5
 8003492:	f000 f8b7 	bl	8003604 <_sbrk_r>
 8003496:	1c43      	adds	r3, r0, #1
 8003498:	d00a      	beq.n	80034b0 <sbrk_aligned+0x34>
 800349a:	1cc4      	adds	r4, r0, #3
 800349c:	f024 0403 	bic.w	r4, r4, #3
 80034a0:	42a0      	cmp	r0, r4
 80034a2:	d007      	beq.n	80034b4 <sbrk_aligned+0x38>
 80034a4:	1a21      	subs	r1, r4, r0
 80034a6:	4628      	mov	r0, r5
 80034a8:	f000 f8ac 	bl	8003604 <_sbrk_r>
 80034ac:	3001      	adds	r0, #1
 80034ae:	d101      	bne.n	80034b4 <sbrk_aligned+0x38>
 80034b0:	f04f 34ff 	mov.w	r4, #4294967295
 80034b4:	4620      	mov	r0, r4
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
 80034b8:	200000dc 	.word	0x200000dc

080034bc <_malloc_r>:
 80034bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c0:	1ccd      	adds	r5, r1, #3
 80034c2:	f025 0503 	bic.w	r5, r5, #3
 80034c6:	3508      	adds	r5, #8
 80034c8:	2d0c      	cmp	r5, #12
 80034ca:	bf38      	it	cc
 80034cc:	250c      	movcc	r5, #12
 80034ce:	2d00      	cmp	r5, #0
 80034d0:	4607      	mov	r7, r0
 80034d2:	db01      	blt.n	80034d8 <_malloc_r+0x1c>
 80034d4:	42a9      	cmp	r1, r5
 80034d6:	d905      	bls.n	80034e4 <_malloc_r+0x28>
 80034d8:	230c      	movs	r3, #12
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	2600      	movs	r6, #0
 80034de:	4630      	mov	r0, r6
 80034e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034e4:	4e2e      	ldr	r6, [pc, #184]	; (80035a0 <_malloc_r+0xe4>)
 80034e6:	f000 f89d 	bl	8003624 <__malloc_lock>
 80034ea:	6833      	ldr	r3, [r6, #0]
 80034ec:	461c      	mov	r4, r3
 80034ee:	bb34      	cbnz	r4, 800353e <_malloc_r+0x82>
 80034f0:	4629      	mov	r1, r5
 80034f2:	4638      	mov	r0, r7
 80034f4:	f7ff ffc2 	bl	800347c <sbrk_aligned>
 80034f8:	1c43      	adds	r3, r0, #1
 80034fa:	4604      	mov	r4, r0
 80034fc:	d14d      	bne.n	800359a <_malloc_r+0xde>
 80034fe:	6834      	ldr	r4, [r6, #0]
 8003500:	4626      	mov	r6, r4
 8003502:	2e00      	cmp	r6, #0
 8003504:	d140      	bne.n	8003588 <_malloc_r+0xcc>
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	4631      	mov	r1, r6
 800350a:	4638      	mov	r0, r7
 800350c:	eb04 0803 	add.w	r8, r4, r3
 8003510:	f000 f878 	bl	8003604 <_sbrk_r>
 8003514:	4580      	cmp	r8, r0
 8003516:	d13a      	bne.n	800358e <_malloc_r+0xd2>
 8003518:	6821      	ldr	r1, [r4, #0]
 800351a:	3503      	adds	r5, #3
 800351c:	1a6d      	subs	r5, r5, r1
 800351e:	f025 0503 	bic.w	r5, r5, #3
 8003522:	3508      	adds	r5, #8
 8003524:	2d0c      	cmp	r5, #12
 8003526:	bf38      	it	cc
 8003528:	250c      	movcc	r5, #12
 800352a:	4629      	mov	r1, r5
 800352c:	4638      	mov	r0, r7
 800352e:	f7ff ffa5 	bl	800347c <sbrk_aligned>
 8003532:	3001      	adds	r0, #1
 8003534:	d02b      	beq.n	800358e <_malloc_r+0xd2>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	442b      	add	r3, r5
 800353a:	6023      	str	r3, [r4, #0]
 800353c:	e00e      	b.n	800355c <_malloc_r+0xa0>
 800353e:	6822      	ldr	r2, [r4, #0]
 8003540:	1b52      	subs	r2, r2, r5
 8003542:	d41e      	bmi.n	8003582 <_malloc_r+0xc6>
 8003544:	2a0b      	cmp	r2, #11
 8003546:	d916      	bls.n	8003576 <_malloc_r+0xba>
 8003548:	1961      	adds	r1, r4, r5
 800354a:	42a3      	cmp	r3, r4
 800354c:	6025      	str	r5, [r4, #0]
 800354e:	bf18      	it	ne
 8003550:	6059      	strne	r1, [r3, #4]
 8003552:	6863      	ldr	r3, [r4, #4]
 8003554:	bf08      	it	eq
 8003556:	6031      	streq	r1, [r6, #0]
 8003558:	5162      	str	r2, [r4, r5]
 800355a:	604b      	str	r3, [r1, #4]
 800355c:	4638      	mov	r0, r7
 800355e:	f104 060b 	add.w	r6, r4, #11
 8003562:	f000 f865 	bl	8003630 <__malloc_unlock>
 8003566:	f026 0607 	bic.w	r6, r6, #7
 800356a:	1d23      	adds	r3, r4, #4
 800356c:	1af2      	subs	r2, r6, r3
 800356e:	d0b6      	beq.n	80034de <_malloc_r+0x22>
 8003570:	1b9b      	subs	r3, r3, r6
 8003572:	50a3      	str	r3, [r4, r2]
 8003574:	e7b3      	b.n	80034de <_malloc_r+0x22>
 8003576:	6862      	ldr	r2, [r4, #4]
 8003578:	42a3      	cmp	r3, r4
 800357a:	bf0c      	ite	eq
 800357c:	6032      	streq	r2, [r6, #0]
 800357e:	605a      	strne	r2, [r3, #4]
 8003580:	e7ec      	b.n	800355c <_malloc_r+0xa0>
 8003582:	4623      	mov	r3, r4
 8003584:	6864      	ldr	r4, [r4, #4]
 8003586:	e7b2      	b.n	80034ee <_malloc_r+0x32>
 8003588:	4634      	mov	r4, r6
 800358a:	6876      	ldr	r6, [r6, #4]
 800358c:	e7b9      	b.n	8003502 <_malloc_r+0x46>
 800358e:	230c      	movs	r3, #12
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4638      	mov	r0, r7
 8003594:	f000 f84c 	bl	8003630 <__malloc_unlock>
 8003598:	e7a1      	b.n	80034de <_malloc_r+0x22>
 800359a:	6025      	str	r5, [r4, #0]
 800359c:	e7de      	b.n	800355c <_malloc_r+0xa0>
 800359e:	bf00      	nop
 80035a0:	200000d8 	.word	0x200000d8

080035a4 <_realloc_r>:
 80035a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a8:	4680      	mov	r8, r0
 80035aa:	4614      	mov	r4, r2
 80035ac:	460e      	mov	r6, r1
 80035ae:	b921      	cbnz	r1, 80035ba <_realloc_r+0x16>
 80035b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035b4:	4611      	mov	r1, r2
 80035b6:	f7ff bf81 	b.w	80034bc <_malloc_r>
 80035ba:	b92a      	cbnz	r2, 80035c8 <_realloc_r+0x24>
 80035bc:	f7ff ff12 	bl	80033e4 <_free_r>
 80035c0:	4625      	mov	r5, r4
 80035c2:	4628      	mov	r0, r5
 80035c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035c8:	f000 f838 	bl	800363c <_malloc_usable_size_r>
 80035cc:	4284      	cmp	r4, r0
 80035ce:	4607      	mov	r7, r0
 80035d0:	d802      	bhi.n	80035d8 <_realloc_r+0x34>
 80035d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80035d6:	d812      	bhi.n	80035fe <_realloc_r+0x5a>
 80035d8:	4621      	mov	r1, r4
 80035da:	4640      	mov	r0, r8
 80035dc:	f7ff ff6e 	bl	80034bc <_malloc_r>
 80035e0:	4605      	mov	r5, r0
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d0ed      	beq.n	80035c2 <_realloc_r+0x1e>
 80035e6:	42bc      	cmp	r4, r7
 80035e8:	4622      	mov	r2, r4
 80035ea:	4631      	mov	r1, r6
 80035ec:	bf28      	it	cs
 80035ee:	463a      	movcs	r2, r7
 80035f0:	f7ff fed0 	bl	8003394 <memcpy>
 80035f4:	4631      	mov	r1, r6
 80035f6:	4640      	mov	r0, r8
 80035f8:	f7ff fef4 	bl	80033e4 <_free_r>
 80035fc:	e7e1      	b.n	80035c2 <_realloc_r+0x1e>
 80035fe:	4635      	mov	r5, r6
 8003600:	e7df      	b.n	80035c2 <_realloc_r+0x1e>
	...

08003604 <_sbrk_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	4d06      	ldr	r5, [pc, #24]	; (8003620 <_sbrk_r+0x1c>)
 8003608:	2300      	movs	r3, #0
 800360a:	4604      	mov	r4, r0
 800360c:	4608      	mov	r0, r1
 800360e:	602b      	str	r3, [r5, #0]
 8003610:	f7fd f93c 	bl	800088c <_sbrk>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d102      	bne.n	800361e <_sbrk_r+0x1a>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	b103      	cbz	r3, 800361e <_sbrk_r+0x1a>
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	200000e0 	.word	0x200000e0

08003624 <__malloc_lock>:
 8003624:	4801      	ldr	r0, [pc, #4]	; (800362c <__malloc_lock+0x8>)
 8003626:	f000 b811 	b.w	800364c <__retarget_lock_acquire_recursive>
 800362a:	bf00      	nop
 800362c:	200000e4 	.word	0x200000e4

08003630 <__malloc_unlock>:
 8003630:	4801      	ldr	r0, [pc, #4]	; (8003638 <__malloc_unlock+0x8>)
 8003632:	f000 b80c 	b.w	800364e <__retarget_lock_release_recursive>
 8003636:	bf00      	nop
 8003638:	200000e4 	.word	0x200000e4

0800363c <_malloc_usable_size_r>:
 800363c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003640:	1f18      	subs	r0, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	bfbc      	itt	lt
 8003646:	580b      	ldrlt	r3, [r1, r0]
 8003648:	18c0      	addlt	r0, r0, r3
 800364a:	4770      	bx	lr

0800364c <__retarget_lock_acquire_recursive>:
 800364c:	4770      	bx	lr

0800364e <__retarget_lock_release_recursive>:
 800364e:	4770      	bx	lr

08003650 <_init>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	bf00      	nop
 8003654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003656:	bc08      	pop	{r3}
 8003658:	469e      	mov	lr, r3
 800365a:	4770      	bx	lr

0800365c <_fini>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	bf00      	nop
 8003660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003662:	bc08      	pop	{r3}
 8003664:	469e      	mov	lr, r3
 8003666:	4770      	bx	lr
