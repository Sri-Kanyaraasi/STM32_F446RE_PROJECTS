
timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b98  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d5c  08000d5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d5c  08000d5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d5c  08000d5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d5c  08000d5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d5c  08000d5c  00010d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d60  08000d60  00010d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08000d70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000d70  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006975  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e74  00000000  00000000  000269b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  00027828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  00027f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f08  00000000  00000000  000285b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007571  00000000  00000000  000494b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce1a1  00000000  00000000  00050a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ebca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc0  00000000  00000000  0011ec1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d44 	.word	0x08000d44

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08000d44 	.word	0x08000d44

08000204 <SysTick_Handler>:
#include "stm32f4xx_hal.h"
#include "main.h"
//Systick interrupt occurs at every 1 millisecond
extern UART_HandleTypeDef huart2;
void SysTick_Handler(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000208:	f000 f940 	bl	800048c <HAL_IncTick>
	//TO  process the systik interrupt we call the cube api
	HAL_SYSTICK_IRQHandler();
 800020c:	f000 fa63 	bl	80006d6 <HAL_SYSTICK_IRQHandler>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}

08000214 <main>:
void GPIO_Init(void);

TIM_HandleTypeDef htime6;

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	HAL_Init();
 8000218:	f000 f8e6 	bl	80003e8 <HAL_Init>
	SystemClockConfig();
 800021c:	f000 f81c 	bl	8000258 <SystemClockConfig>
	GPIO_Init();
 8000220:	f000 f822 	bl	8000268 <GPIO_Init>
	time6_init();
 8000224:	f000 f844 	bl	80002b0 <time6_init>

	//start timer
	HAL_TIM_Base_Start(&htime6);
 8000228:	4808      	ldr	r0, [pc, #32]	; (800024c <main+0x38>)
 800022a:	f000 fc5f 	bl	8000aec <HAL_TIM_Base_Start>
	while(1)
	{
		// loop until the update event flag is set
		while(!(TIM6->SR & TIM_SR_UIF));
 800022e:	bf00      	nop
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <main+0x3c>)
 8000232:	691b      	ldr	r3, [r3, #16]
 8000234:	f003 0301 	and.w	r3, r3, #1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d0f9      	beq.n	8000230 <main+0x1c>
		// the requires time dealy has been elapsed
		//user code can be executed
		TIM6->SR = 0;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <main+0x3c>)
 800023e:	2200      	movs	r2, #0
 8000240:	611a      	str	r2, [r3, #16]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000242:	2120      	movs	r1, #32
 8000244:	4803      	ldr	r0, [pc, #12]	; (8000254 <main+0x40>)
 8000246:	f000 fbe7 	bl	8000a18 <HAL_GPIO_TogglePin>
		while(!(TIM6->SR & TIM_SR_UIF));
 800024a:	e7f0      	b.n	800022e <main+0x1a>
 800024c:	20000028 	.word	0x20000028
 8000250:	40001000 	.word	0x40001000
 8000254:	40020000 	.word	0x40020000

08000258 <SystemClockConfig>:
	return 0;
}


void SystemClockConfig(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0

}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
	...

08000268 <GPIO_Init>:

void GPIO_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	2300      	movs	r3, #0
 8000270:	603b      	str	r3, [r7, #0]
 8000272:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <GPIO_Init+0x40>)
 8000274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000276:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <GPIO_Init+0x40>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	6313      	str	r3, [r2, #48]	; 0x30
 800027e:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <GPIO_Init+0x40>)
 8000280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin=GPIO_PIN_5;
 800028a:	2320      	movs	r3, #32
 800028c:	607b      	str	r3, [r7, #4]
	ledgpio.Mode =GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull =GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4619      	mov	r1, r3
 800029a:	4804      	ldr	r0, [pc, #16]	; (80002ac <GPIO_Init+0x44>)
 800029c:	f000 fa28 	bl	80006f0 <HAL_GPIO_Init>
}
 80002a0:	bf00      	nop
 80002a2:	3718      	adds	r7, #24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020000 	.word	0x40020000

080002b0 <time6_init>:
void time6_init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	htime6.Instance = TIM6;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <time6_init+0x2c>)
 80002b6:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <time6_init+0x30>)
 80002b8:	601a      	str	r2, [r3, #0]
	htime6.Init.Prescaler =24;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <time6_init+0x2c>)
 80002bc:	2218      	movs	r2, #24
 80002be:	605a      	str	r2, [r3, #4]
	htime6.Init.Period = 64000-1; //give one number less than the calculated one
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <time6_init+0x2c>)
 80002c2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80002c6:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htime6)!=HAL_OK)
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <time6_init+0x2c>)
 80002ca:	f000 fbbf 	bl	8000a4c <HAL_TIM_Base_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <time6_init+0x28>
	{
		Error_Handler();
 80002d4:	f000 f806 	bl	80002e4 <Error_Handler>
	}
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000028 	.word	0x20000028
 80002e0:	40001000 	.word	0x40001000

080002e4 <Error_Handler>:


void Error_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	while(1);
 80002e8:	e7fe      	b.n	80002e8 <Error_Handler+0x4>
	...

080002ec <HAL_MspInit>:
 */
//low level initialisation
#include "stm32f4xx_hal.h"
#include "main.h"
void HAL_MspInit(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);//1
 80002f0:	2003      	movs	r0, #3
 80002f2:	f000 f9af 	bl	8000654 <HAL_NVIC_SetPriorityGrouping>
	SCB->SHCSR |=0X7 << 16;//2)USAGE,memory,bus used
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <HAL_MspInit+0x40>)
 80002f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002fa:	4a0c      	ldr	r2, [pc, #48]	; (800032c <HAL_MspInit+0x40>)
 80002fc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000300:	6253      	str	r3, [r2, #36]	; 0x24
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000302:	2200      	movs	r2, #0
 8000304:	2100      	movs	r1, #0
 8000306:	f06f 000b 	mvn.w	r0, #11
 800030a:	f000 f9ae 	bl	800066a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800030e:	2200      	movs	r2, #0
 8000310:	2100      	movs	r1, #0
 8000312:	f06f 000a 	mvn.w	r0, #10
 8000316:	f000 f9a8 	bl	800066a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800031a:	2200      	movs	r2, #0
 800031c:	2100      	movs	r1, #0
 800031e:	f06f 0009 	mvn.w	r0, #9
 8000322:	f000 f9a2 	bl	800066a <HAL_NVIC_SetPriority>

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <HAL_TIM_Base_MspInit>:
void  HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	//1. enable the clock for the time6 pheripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <HAL_TIM_Base_MspInit+0x3c>)
 800033e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000340:	4a0a      	ldr	r2, [pc, #40]	; (800036c <HAL_TIM_Base_MspInit+0x3c>)
 8000342:	f043 0310 	orr.w	r3, r3, #16
 8000346:	6413      	str	r3, [r2, #64]	; 0x40
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <HAL_TIM_Base_MspInit+0x3c>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	f003 0310 	and.w	r3, r3, #16
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]

	//2.enable of irq

	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000354:	2036      	movs	r0, #54	; 0x36
 8000356:	f000 f9a4 	bl	80006a2 <HAL_NVIC_EnableIRQ>

	//set up the priority
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 800035a:	2200      	movs	r2, #0
 800035c:	210f      	movs	r1, #15
 800035e:	2036      	movs	r0, #54	; 0x36
 8000360:	f000 f983 	bl	800066a <HAL_NVIC_SetPriority>
}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40023800 	.word	0x40023800

08000370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <SystemInit+0x20>)
 8000376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800037a:	4a05      	ldr	r2, [pc, #20]	; (8000390 <SystemInit+0x20>)
 800037c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00

08000394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000398:	480d      	ldr	r0, [pc, #52]	; (80003d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800039a:	490e      	ldr	r1, [pc, #56]	; (80003d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800039c:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003b0:	4c0b      	ldr	r4, [pc, #44]	; (80003e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003be:	f7ff ffd7 	bl	8000370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003c2:	f000 fc9b 	bl	8000cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c6:	f7ff ff25 	bl	8000214 <main>
  bx  lr    
 80003ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003d8:	08000d64 	.word	0x08000d64
  ldr r2, =_sbss
 80003dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003e0:	20000074 	.word	0x20000074

080003e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC_IRQHandler>
	...

080003e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80003ec:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <HAL_Init+0x40>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a0d      	ldr	r2, [pc, #52]	; (8000428 <HAL_Init+0x40>)
 80003f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <HAL_Init+0x40>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <HAL_Init+0x40>)
 80003fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000402:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <HAL_Init+0x40>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <HAL_Init+0x40>)
 800040a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800040e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000410:	2003      	movs	r0, #3
 8000412:	f000 f91f 	bl	8000654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000416:	2000      	movs	r0, #0
 8000418:	f000 f808 	bl	800042c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800041c:	f7ff ff66 	bl	80002ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000420:	2300      	movs	r3, #0
}
 8000422:	4618      	mov	r0, r3
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40023c00 	.word	0x40023c00

0800042c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_InitTick+0x54>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <HAL_InitTick+0x58>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	4619      	mov	r1, r3
 800043e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000442:	fbb3 f3f1 	udiv	r3, r3, r1
 8000446:	fbb2 f3f3 	udiv	r3, r2, r3
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f937 	bl	80006be <HAL_SYSTICK_Config>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000456:	2301      	movs	r3, #1
 8000458:	e00e      	b.n	8000478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2b0f      	cmp	r3, #15
 800045e:	d80a      	bhi.n	8000476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000460:	2200      	movs	r2, #0
 8000462:	6879      	ldr	r1, [r7, #4]
 8000464:	f04f 30ff 	mov.w	r0, #4294967295
 8000468:	f000 f8ff 	bl	800066a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800046c:	4a06      	ldr	r2, [pc, #24]	; (8000488 <HAL_InitTick+0x5c>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000472:	2300      	movs	r3, #0
 8000474:	e000      	b.n	8000478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000476:	2301      	movs	r3, #1
}
 8000478:	4618      	mov	r0, r3
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000000 	.word	0x20000000
 8000484:	20000008 	.word	0x20000008
 8000488:	20000004 	.word	0x20000004

0800048c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_IncTick+0x20>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	461a      	mov	r2, r3
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_IncTick+0x24>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4413      	add	r3, r2
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <HAL_IncTick+0x24>)
 800049e:	6013      	str	r3, [r2, #0]
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000008 	.word	0x20000008
 80004b0:	20000070 	.word	0x20000070

080004b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f003 0307 	and.w	r3, r3, #7
 80004c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <__NVIC_SetPriorityGrouping+0x44>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004ca:	68ba      	ldr	r2, [r7, #8]
 80004cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004d0:	4013      	ands	r3, r2
 80004d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004e6:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <__NVIC_SetPriorityGrouping+0x44>)
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	60d3      	str	r3, [r2, #12]
}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <__NVIC_GetPriorityGrouping+0x18>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	0a1b      	lsrs	r3, r3, #8
 8000506:	f003 0307 	and.w	r3, r3, #7
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db0b      	blt.n	8000542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 021f 	and.w	r2, r3, #31
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <__NVIC_EnableIRQ+0x38>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	2001      	movs	r0, #1
 800053a:	fa00 f202 	lsl.w	r2, r0, r2
 800053e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000e100 	.word	0xe000e100

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db0a      	blt.n	800057e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2da      	uxtb	r2, r3
 800056c:	490c      	ldr	r1, [pc, #48]	; (80005a0 <__NVIC_SetPriority+0x4c>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800057c:	e00a      	b.n	8000594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4908      	ldr	r1, [pc, #32]	; (80005a4 <__NVIC_SetPriority+0x50>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	3b04      	subs	r3, #4
 800058c:	0112      	lsls	r2, r2, #4
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	440b      	add	r3, r1
 8000592:	761a      	strb	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000e100 	.word	0xe000e100
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f1c3 0307 	rsb	r3, r3, #7
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	bf28      	it	cs
 80005c6:	2304      	movcs	r3, #4
 80005c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3304      	adds	r3, #4
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d902      	bls.n	80005d8 <NVIC_EncodePriority+0x30>
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3b03      	subs	r3, #3
 80005d6:	e000      	b.n	80005da <NVIC_EncodePriority+0x32>
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	43d9      	mvns	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	4313      	orrs	r3, r2
         );
}
 8000602:	4618      	mov	r0, r3
 8000604:	3724      	adds	r7, #36	; 0x24
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
	...

08000610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000620:	d301      	bcc.n	8000626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000622:	2301      	movs	r3, #1
 8000624:	e00f      	b.n	8000646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <SysTick_Config+0x40>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3b01      	subs	r3, #1
 800062c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800062e:	210f      	movs	r1, #15
 8000630:	f04f 30ff 	mov.w	r0, #4294967295
 8000634:	f7ff ff8e 	bl	8000554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <SysTick_Config+0x40>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <SysTick_Config+0x40>)
 8000640:	2207      	movs	r2, #7
 8000642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	e000e010 	.word	0xe000e010

08000654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff ff29 	bl	80004b4 <__NVIC_SetPriorityGrouping>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800066a:	b580      	push	{r7, lr}
 800066c:	b086      	sub	sp, #24
 800066e:	af00      	add	r7, sp, #0
 8000670:	4603      	mov	r3, r0
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	607a      	str	r2, [r7, #4]
 8000676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800067c:	f7ff ff3e 	bl	80004fc <__NVIC_GetPriorityGrouping>
 8000680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	68b9      	ldr	r1, [r7, #8]
 8000686:	6978      	ldr	r0, [r7, #20]
 8000688:	f7ff ff8e 	bl	80005a8 <NVIC_EncodePriority>
 800068c:	4602      	mov	r2, r0
 800068e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff5d 	bl	8000554 <__NVIC_SetPriority>
}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	4603      	mov	r3, r0
 80006aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff31 	bl	8000518 <__NVIC_EnableIRQ>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff ffa2 	bl	8000610 <SysTick_Config>
 80006cc:	4603      	mov	r3, r0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80006da:	f000 f802 	bl	80006e2 <HAL_SYSTICK_Callback>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
 800070a:	e165      	b.n	80009d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800070c:	2201      	movs	r2, #1
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	4013      	ands	r3, r2
 800071e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000720:	693a      	ldr	r2, [r7, #16]
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	429a      	cmp	r2, r3
 8000726:	f040 8154 	bne.w	80009d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	f003 0303 	and.w	r3, r3, #3
 8000732:	2b01      	cmp	r3, #1
 8000734:	d005      	beq.n	8000742 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800073e:	2b02      	cmp	r3, #2
 8000740:	d130      	bne.n	80007a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	2203      	movs	r2, #3
 800074e:	fa02 f303 	lsl.w	r3, r2, r3
 8000752:	43db      	mvns	r3, r3
 8000754:	69ba      	ldr	r2, [r7, #24]
 8000756:	4013      	ands	r3, r2
 8000758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	68da      	ldr	r2, [r3, #12]
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	69ba      	ldr	r2, [r7, #24]
 8000768:	4313      	orrs	r3, r2
 800076a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	69ba      	ldr	r2, [r7, #24]
 8000770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000778:	2201      	movs	r2, #1
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	43db      	mvns	r3, r3
 8000782:	69ba      	ldr	r2, [r7, #24]
 8000784:	4013      	ands	r3, r2
 8000786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	091b      	lsrs	r3, r3, #4
 800078e:	f003 0201 	and.w	r2, r3, #1
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	69ba      	ldr	r2, [r7, #24]
 800079a:	4313      	orrs	r3, r2
 800079c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	69ba      	ldr	r2, [r7, #24]
 80007a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f003 0303 	and.w	r3, r3, #3
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d017      	beq.n	80007e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	2203      	movs	r2, #3
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	43db      	mvns	r3, r3
 80007c2:	69ba      	ldr	r2, [r7, #24]
 80007c4:	4013      	ands	r3, r2
 80007c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	69ba      	ldr	r2, [r7, #24]
 80007de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f003 0303 	and.w	r3, r3, #3
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d123      	bne.n	8000834 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	08da      	lsrs	r2, r3, #3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3208      	adds	r2, #8
 80007f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	f003 0307 	and.w	r3, r3, #7
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	220f      	movs	r2, #15
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	4013      	ands	r3, r2
 800080e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	691a      	ldr	r2, [r3, #16]
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	4313      	orrs	r3, r2
 8000824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	08da      	lsrs	r2, r3, #3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3208      	adds	r2, #8
 800082e:	69b9      	ldr	r1, [r7, #24]
 8000830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	2203      	movs	r2, #3
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	4013      	ands	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f003 0203 	and.w	r2, r3, #3
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	69ba      	ldr	r2, [r7, #24]
 800085e:	4313      	orrs	r3, r2
 8000860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000870:	2b00      	cmp	r3, #0
 8000872:	f000 80ae 	beq.w	80009d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <HAL_GPIO_Init+0x300>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a5c      	ldr	r2, [pc, #368]	; (80009f0 <HAL_GPIO_Init+0x300>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b5a      	ldr	r3, [pc, #360]	; (80009f0 <HAL_GPIO_Init+0x300>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000892:	4a58      	ldr	r2, [pc, #352]	; (80009f4 <HAL_GPIO_Init+0x304>)
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	3302      	adds	r3, #2
 800089a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f003 0303 	and.w	r3, r3, #3
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	220f      	movs	r2, #15
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43db      	mvns	r3, r3
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	4013      	ands	r3, r2
 80008b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a4f      	ldr	r2, [pc, #316]	; (80009f8 <HAL_GPIO_Init+0x308>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d025      	beq.n	800090a <HAL_GPIO_Init+0x21a>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a4e      	ldr	r2, [pc, #312]	; (80009fc <HAL_GPIO_Init+0x30c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d01f      	beq.n	8000906 <HAL_GPIO_Init+0x216>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a4d      	ldr	r2, [pc, #308]	; (8000a00 <HAL_GPIO_Init+0x310>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d019      	beq.n	8000902 <HAL_GPIO_Init+0x212>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a4c      	ldr	r2, [pc, #304]	; (8000a04 <HAL_GPIO_Init+0x314>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d013      	beq.n	80008fe <HAL_GPIO_Init+0x20e>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a4b      	ldr	r2, [pc, #300]	; (8000a08 <HAL_GPIO_Init+0x318>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d00d      	beq.n	80008fa <HAL_GPIO_Init+0x20a>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a4a      	ldr	r2, [pc, #296]	; (8000a0c <HAL_GPIO_Init+0x31c>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d007      	beq.n	80008f6 <HAL_GPIO_Init+0x206>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a49      	ldr	r2, [pc, #292]	; (8000a10 <HAL_GPIO_Init+0x320>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <HAL_GPIO_Init+0x202>
 80008ee:	2306      	movs	r3, #6
 80008f0:	e00c      	b.n	800090c <HAL_GPIO_Init+0x21c>
 80008f2:	2307      	movs	r3, #7
 80008f4:	e00a      	b.n	800090c <HAL_GPIO_Init+0x21c>
 80008f6:	2305      	movs	r3, #5
 80008f8:	e008      	b.n	800090c <HAL_GPIO_Init+0x21c>
 80008fa:	2304      	movs	r3, #4
 80008fc:	e006      	b.n	800090c <HAL_GPIO_Init+0x21c>
 80008fe:	2303      	movs	r3, #3
 8000900:	e004      	b.n	800090c <HAL_GPIO_Init+0x21c>
 8000902:	2302      	movs	r3, #2
 8000904:	e002      	b.n	800090c <HAL_GPIO_Init+0x21c>
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <HAL_GPIO_Init+0x21c>
 800090a:	2300      	movs	r3, #0
 800090c:	69fa      	ldr	r2, [r7, #28]
 800090e:	f002 0203 	and.w	r2, r2, #3
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	4093      	lsls	r3, r2
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4313      	orrs	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800091c:	4935      	ldr	r1, [pc, #212]	; (80009f4 <HAL_GPIO_Init+0x304>)
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	089b      	lsrs	r3, r3, #2
 8000922:	3302      	adds	r3, #2
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800092a:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <HAL_GPIO_Init+0x324>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	43db      	mvns	r3, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4013      	ands	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000942:	2b00      	cmp	r3, #0
 8000944:	d003      	beq.n	800094e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000946:	69ba      	ldr	r2, [r7, #24]
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800094e:	4a31      	ldr	r2, [pc, #196]	; (8000a14 <HAL_GPIO_Init+0x324>)
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000954:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <HAL_GPIO_Init+0x324>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	43db      	mvns	r3, r3
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	4013      	ands	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096c:	2b00      	cmp	r3, #0
 800096e:	d003      	beq.n	8000978 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	4313      	orrs	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000978:	4a26      	ldr	r2, [pc, #152]	; (8000a14 <HAL_GPIO_Init+0x324>)
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <HAL_GPIO_Init+0x324>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	43db      	mvns	r3, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4013      	ands	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <HAL_GPIO_Init+0x324>)
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <HAL_GPIO_Init+0x324>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	43db      	mvns	r3, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d003      	beq.n	80009cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009cc:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <HAL_GPIO_Init+0x324>)
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3301      	adds	r3, #1
 80009d6:	61fb      	str	r3, [r7, #28]
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	2b0f      	cmp	r3, #15
 80009dc:	f67f ae96 	bls.w	800070c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40013800 	.word	0x40013800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40021400 	.word	0x40021400
 8000a10:	40021800 	.word	0x40021800
 8000a14:	40013c00 	.word	0x40013c00

08000a18 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a2a:	887a      	ldrh	r2, [r7, #2]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	041a      	lsls	r2, r3, #16
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	43d9      	mvns	r1, r3
 8000a36:	887b      	ldrh	r3, [r7, #2]
 8000a38:	400b      	ands	r3, r1
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	619a      	str	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e041      	b.n	8000ae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d106      	bne.n	8000a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fc5c 	bl	8000330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3304      	adds	r3, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4610      	mov	r0, r2
 8000a8c:	f000 f896 	bl	8000bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2201      	movs	r2, #1
 8000a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2201      	movs	r2, #1
 8000abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2201      	movs	r2, #1
 8000adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d001      	beq.n	8000b04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e046      	b.n	8000b92 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2202      	movs	r2, #2
 8000b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <HAL_TIM_Base_Start+0xb4>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d022      	beq.n	8000b5c <HAL_TIM_Base_Start+0x70>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b1e:	d01d      	beq.n	8000b5c <HAL_TIM_Base_Start+0x70>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <HAL_TIM_Base_Start+0xb8>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d018      	beq.n	8000b5c <HAL_TIM_Base_Start+0x70>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <HAL_TIM_Base_Start+0xbc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d013      	beq.n	8000b5c <HAL_TIM_Base_Start+0x70>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <HAL_TIM_Base_Start+0xc0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d00e      	beq.n	8000b5c <HAL_TIM_Base_Start+0x70>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <HAL_TIM_Base_Start+0xc4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d009      	beq.n	8000b5c <HAL_TIM_Base_Start+0x70>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_TIM_Base_Start+0xc8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d004      	beq.n	8000b5c <HAL_TIM_Base_Start+0x70>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a18      	ldr	r2, [pc, #96]	; (8000bb8 <HAL_TIM_Base_Start+0xcc>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d111      	bne.n	8000b80 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d010      	beq.n	8000b90 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f042 0201 	orr.w	r2, r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000b7e:	e007      	b.n	8000b90 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f042 0201 	orr.w	r2, r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40010000 	.word	0x40010000
 8000ba4:	40000400 	.word	0x40000400
 8000ba8:	40000800 	.word	0x40000800
 8000bac:	40000c00 	.word	0x40000c00
 8000bb0:	40010400 	.word	0x40010400
 8000bb4:	40014000 	.word	0x40014000
 8000bb8:	40001800 	.word	0x40001800

08000bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a40      	ldr	r2, [pc, #256]	; (8000cd0 <TIM_Base_SetConfig+0x114>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d013      	beq.n	8000bfc <TIM_Base_SetConfig+0x40>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bda:	d00f      	beq.n	8000bfc <TIM_Base_SetConfig+0x40>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a3d      	ldr	r2, [pc, #244]	; (8000cd4 <TIM_Base_SetConfig+0x118>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00b      	beq.n	8000bfc <TIM_Base_SetConfig+0x40>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a3c      	ldr	r2, [pc, #240]	; (8000cd8 <TIM_Base_SetConfig+0x11c>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <TIM_Base_SetConfig+0x40>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a3b      	ldr	r2, [pc, #236]	; (8000cdc <TIM_Base_SetConfig+0x120>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d003      	beq.n	8000bfc <TIM_Base_SetConfig+0x40>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a3a      	ldr	r2, [pc, #232]	; (8000ce0 <TIM_Base_SetConfig+0x124>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d108      	bne.n	8000c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a2f      	ldr	r2, [pc, #188]	; (8000cd0 <TIM_Base_SetConfig+0x114>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d02b      	beq.n	8000c6e <TIM_Base_SetConfig+0xb2>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c1c:	d027      	beq.n	8000c6e <TIM_Base_SetConfig+0xb2>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a2c      	ldr	r2, [pc, #176]	; (8000cd4 <TIM_Base_SetConfig+0x118>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d023      	beq.n	8000c6e <TIM_Base_SetConfig+0xb2>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <TIM_Base_SetConfig+0x11c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d01f      	beq.n	8000c6e <TIM_Base_SetConfig+0xb2>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a2a      	ldr	r2, [pc, #168]	; (8000cdc <TIM_Base_SetConfig+0x120>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d01b      	beq.n	8000c6e <TIM_Base_SetConfig+0xb2>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a29      	ldr	r2, [pc, #164]	; (8000ce0 <TIM_Base_SetConfig+0x124>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d017      	beq.n	8000c6e <TIM_Base_SetConfig+0xb2>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a28      	ldr	r2, [pc, #160]	; (8000ce4 <TIM_Base_SetConfig+0x128>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d013      	beq.n	8000c6e <TIM_Base_SetConfig+0xb2>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <TIM_Base_SetConfig+0x12c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d00f      	beq.n	8000c6e <TIM_Base_SetConfig+0xb2>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a26      	ldr	r2, [pc, #152]	; (8000cec <TIM_Base_SetConfig+0x130>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d00b      	beq.n	8000c6e <TIM_Base_SetConfig+0xb2>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a25      	ldr	r2, [pc, #148]	; (8000cf0 <TIM_Base_SetConfig+0x134>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d007      	beq.n	8000c6e <TIM_Base_SetConfig+0xb2>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a24      	ldr	r2, [pc, #144]	; (8000cf4 <TIM_Base_SetConfig+0x138>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d003      	beq.n	8000c6e <TIM_Base_SetConfig+0xb2>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <TIM_Base_SetConfig+0x13c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d108      	bne.n	8000c80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <TIM_Base_SetConfig+0x114>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d003      	beq.n	8000cb4 <TIM_Base_SetConfig+0xf8>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <TIM_Base_SetConfig+0x124>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d103      	bne.n	8000cbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	691a      	ldr	r2, [r3, #16]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	615a      	str	r2, [r3, #20]
}
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	40000400 	.word	0x40000400
 8000cd8:	40000800 	.word	0x40000800
 8000cdc:	40000c00 	.word	0x40000c00
 8000ce0:	40010400 	.word	0x40010400
 8000ce4:	40014000 	.word	0x40014000
 8000ce8:	40014400 	.word	0x40014400
 8000cec:	40014800 	.word	0x40014800
 8000cf0:	40001800 	.word	0x40001800
 8000cf4:	40001c00 	.word	0x40001c00
 8000cf8:	40002000 	.word	0x40002000

08000cfc <__libc_init_array>:
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	4d0d      	ldr	r5, [pc, #52]	; (8000d34 <__libc_init_array+0x38>)
 8000d00:	4c0d      	ldr	r4, [pc, #52]	; (8000d38 <__libc_init_array+0x3c>)
 8000d02:	1b64      	subs	r4, r4, r5
 8000d04:	10a4      	asrs	r4, r4, #2
 8000d06:	2600      	movs	r6, #0
 8000d08:	42a6      	cmp	r6, r4
 8000d0a:	d109      	bne.n	8000d20 <__libc_init_array+0x24>
 8000d0c:	4d0b      	ldr	r5, [pc, #44]	; (8000d3c <__libc_init_array+0x40>)
 8000d0e:	4c0c      	ldr	r4, [pc, #48]	; (8000d40 <__libc_init_array+0x44>)
 8000d10:	f000 f818 	bl	8000d44 <_init>
 8000d14:	1b64      	subs	r4, r4, r5
 8000d16:	10a4      	asrs	r4, r4, #2
 8000d18:	2600      	movs	r6, #0
 8000d1a:	42a6      	cmp	r6, r4
 8000d1c:	d105      	bne.n	8000d2a <__libc_init_array+0x2e>
 8000d1e:	bd70      	pop	{r4, r5, r6, pc}
 8000d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d24:	4798      	blx	r3
 8000d26:	3601      	adds	r6, #1
 8000d28:	e7ee      	b.n	8000d08 <__libc_init_array+0xc>
 8000d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d2e:	4798      	blx	r3
 8000d30:	3601      	adds	r6, #1
 8000d32:	e7f2      	b.n	8000d1a <__libc_init_array+0x1e>
 8000d34:	08000d5c 	.word	0x08000d5c
 8000d38:	08000d5c 	.word	0x08000d5c
 8000d3c:	08000d5c 	.word	0x08000d5c
 8000d40:	08000d60 	.word	0x08000d60

08000d44 <_init>:
 8000d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d46:	bf00      	nop
 8000d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4a:	bc08      	pop	{r3}
 8000d4c:	469e      	mov	lr, r3
 8000d4e:	4770      	bx	lr

08000d50 <_fini>:
 8000d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d52:	bf00      	nop
 8000d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d56:	bc08      	pop	{r3}
 8000d58:	469e      	mov	lr, r3
 8000d5a:	4770      	bx	lr
